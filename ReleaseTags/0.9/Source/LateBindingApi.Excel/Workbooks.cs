//Generated by LateBindingApi.CodeGenerator
using System;
using System.Reflection;
using System.ComponentModel;
using System.Runtime.InteropServices;
using LateBindingApi.Core;
using System.Collections;
namespace LateBindingApi.Excel
{
	[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
	public class Workbooks : COMObject
	{
		#region Construction

		public Workbooks(COMObject parentObject, object comProxy) : base(parentObject, comProxy)
		{
		}

		public Workbooks(COMObject parentObject, object comProxy, Type comProxyType) : base(parentObject, comProxy, comProxyType)
		{
		}

		public Workbooks(COMObject replacedObject) : base(replacedObject)
		{
		}

		public Workbooks()
		{
		}

		#endregion

		#region Properties

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public LateBindingApi.Excel.Application Application
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "Application");
				if(null == returnValue)
					return null;
				LateBindingApi.Excel.Application newClass = new LateBindingApi.Excel.Application(this, returnValue);
				return newClass;
			}
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public LateBindingApi.Excel.Enums.XlCreator Creator
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "Creator");
				return (LateBindingApi.Excel.Enums.XlCreator)returnValue;
			}
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public COMObject Parent
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "Parent");
				COMObject returnObject = LateBindingApi.Core.Factory.CreateObjectFromComProxy(this, returnValue);
				return returnObject;
			}
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public Int32 Count
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "Count");
				return (Int32)returnValue;
			}
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public LateBindingApi.Excel.Workbook this[object index]
		{
			get
			{
				object[] paramArray = new object[1];
				paramArray[0] = index;		
				object returnValue = Invoker.PropertyGet(this, "Item", paramArray);
				if(null == returnValue)
					return null;
				LateBindingApi.Excel.Workbook newClass = new LateBindingApi.Excel.Workbook(this, returnValue);
				return newClass;
			}
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public IEnumerator GetEnumerator()
		{
			object enumProxy = Invoker.PropertyGet(this, "_NewEnum");
			COMObject enumerator = new COMObject(this, enumProxy);
			Invoker.Method(enumerator, "Reset", null);
			bool isMoveNextTrue = (bool)Invoker.MethodReturn(enumerator, "MoveNext", null);
            while (true == isMoveNextTrue)
            {
                object itemProxy = Invoker.PropertyGet(enumerator, "Current", null);
				LateBindingApi.Excel.Workbook returnClass = new LateBindingApi.Excel.Workbook (this, itemProxy);
				isMoveNextTrue = (bool)Invoker.MethodReturn(enumerator, "MoveNext", null);
				yield return returnClass;
            }
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public LateBindingApi.Excel.Workbook get__Default(object index)
		{
			object[] paramArray = new object[1];
			paramArray[0] = index;
			object returnValue = Invoker.PropertyGet(this, "_Default", paramArray);
			if(null == returnValue)
				return null;
			LateBindingApi.Excel.Workbook newClass = new LateBindingApi.Excel.Workbook(this, returnValue);
			return newClass;
		}

		#endregion

		#region Methods

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public LateBindingApi.Excel.Workbook Add()
		{
			object returnValue = Invoker.MethodReturn(this, "Add", null);
			if(null == returnValue)
				return null;
			LateBindingApi.Excel.Workbook newClass = new LateBindingApi.Excel.Workbook(this, returnValue);
			return newClass;
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public LateBindingApi.Excel.Workbook Add(object template)
		{
			object[] paramArray = new object[1];
			paramArray[0] = template;
			object returnValue = Invoker.MethodReturn(this, "Add", paramArray);
			if(null == returnValue)
				return null;
			LateBindingApi.Excel.Workbook newClass = new LateBindingApi.Excel.Workbook(this, returnValue);
			return newClass;
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public void Close()
		{
			Invoker.Method(this, "Close", null);
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public LateBindingApi.Excel.Workbook Open(string filename)
		{
			object[] paramArray = new object[1];
			paramArray[0] = filename;
			object returnValue = Invoker.MethodReturn(this, "Open", paramArray);
			if(null == returnValue)
				return null;
			LateBindingApi.Excel.Workbook newClass = new LateBindingApi.Excel.Workbook(this, returnValue);
			return newClass;
		}

		[SupportByLibrary("XL9")]
		public LateBindingApi.Excel.Workbook Open(string filename, object updateLinks, object _readOnly, object format, object password, object writeResPassword, object ignoreReadOnlyRecommended, object origin, object delimiter, object editable, object notify, object converter, object addToMru)
		{
			object[] paramArray = new object[13];
			paramArray[0] = filename;
			paramArray[1] = updateLinks;
			paramArray[2] = _readOnly;
			paramArray[3] = format;
			paramArray[4] = password;
			paramArray[5] = writeResPassword;
			paramArray[6] = ignoreReadOnlyRecommended;
			paramArray[7] = origin;
			paramArray[8] = delimiter;
			paramArray[9] = editable;
			paramArray[10] = notify;
			paramArray[11] = converter;
			paramArray[12] = addToMru;
			object returnValue = Invoker.MethodReturn(this, "Open", paramArray);
			if(null == returnValue)
				return null;
			LateBindingApi.Excel.Workbook newClass = new LateBindingApi.Excel.Workbook(this, returnValue);
			return newClass;
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14")]
		public LateBindingApi.Excel.Workbook Open(string filename, object updateLinks, object _readOnly, object format, object password, object writeResPassword, object ignoreReadOnlyRecommended, object origin, object delimiter, object editable, object notify, object converter, object addToMru, object local, object corruptLoad)
		{
			object[] paramArray = new object[15];
			paramArray[0] = filename;
			paramArray[1] = updateLinks;
			paramArray[2] = _readOnly;
			paramArray[3] = format;
			paramArray[4] = password;
			paramArray[5] = writeResPassword;
			paramArray[6] = ignoreReadOnlyRecommended;
			paramArray[7] = origin;
			paramArray[8] = delimiter;
			paramArray[9] = editable;
			paramArray[10] = notify;
			paramArray[11] = converter;
			paramArray[12] = addToMru;
			paramArray[13] = local;
			paramArray[14] = corruptLoad;
			object returnValue = Invoker.MethodReturn(this, "Open", paramArray);
			if(null == returnValue)
				return null;
			LateBindingApi.Excel.Workbook newClass = new LateBindingApi.Excel.Workbook(this, returnValue);
			return newClass;
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public void _OpenText(string filename, object origin, object startRow, object dataType, LateBindingApi.Excel.Enums.XlTextQualifier textQualifier)
		{
			object[] paramArray = new object[5];
			paramArray[0] = filename;
			paramArray[1] = origin;
			paramArray[2] = startRow;
			paramArray[3] = dataType;
			paramArray[4] = textQualifier;
			Invoker.Method(this, "_OpenText", paramArray);
		}

		[SupportByLibrary("XL9")]
		public void _OpenText(string filename, object origin, object startRow, object dataType, LateBindingApi.Excel.Enums.XlTextQualifier textQualifier, object consecutiveDelimiter, object tab, object semicolon, object comma, object space, object other, object otherChar, object fieldInfo, object textVisualLayout)
		{
			object[] paramArray = new object[14];
			paramArray[0] = filename;
			paramArray[1] = origin;
			paramArray[2] = startRow;
			paramArray[3] = dataType;
			paramArray[4] = textQualifier;
			paramArray[5] = consecutiveDelimiter;
			paramArray[6] = tab;
			paramArray[7] = semicolon;
			paramArray[8] = comma;
			paramArray[9] = space;
			paramArray[10] = other;
			paramArray[11] = otherChar;
			paramArray[12] = fieldInfo;
			paramArray[13] = textVisualLayout;
			Invoker.Method(this, "_OpenText", paramArray);
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14")]
		public void _OpenText(string filename, object origin, object startRow, object dataType, LateBindingApi.Excel.Enums.XlTextQualifier textQualifier, object consecutiveDelimiter, object tab, object semicolon, object comma, object space, object other, object otherChar, object fieldInfo, object textVisualLayout, object decimalSeparator, object thousandsSeparator)
		{
			object[] paramArray = new object[16];
			paramArray[0] = filename;
			paramArray[1] = origin;
			paramArray[2] = startRow;
			paramArray[3] = dataType;
			paramArray[4] = textQualifier;
			paramArray[5] = consecutiveDelimiter;
			paramArray[6] = tab;
			paramArray[7] = semicolon;
			paramArray[8] = comma;
			paramArray[9] = space;
			paramArray[10] = other;
			paramArray[11] = otherChar;
			paramArray[12] = fieldInfo;
			paramArray[13] = textVisualLayout;
			paramArray[14] = decimalSeparator;
			paramArray[15] = thousandsSeparator;
			Invoker.Method(this, "_OpenText", paramArray);
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public void OpenText(string filename, object origin, object startRow, object dataType, LateBindingApi.Excel.Enums.XlTextQualifier textQualifier)
		{
			object[] paramArray = new object[5];
			paramArray[0] = filename;
			paramArray[1] = origin;
			paramArray[2] = startRow;
			paramArray[3] = dataType;
			paramArray[4] = textQualifier;
			Invoker.Method(this, "OpenText", paramArray);
		}

		[SupportByLibrary("XL9")]
		public void OpenText(string filename, object origin, object startRow, object dataType, LateBindingApi.Excel.Enums.XlTextQualifier textQualifier, object consecutiveDelimiter, object tab, object semicolon, object comma, object space, object other, object otherChar, object fieldInfo, object textVisualLayout, object decimalSeparator, object thousandsSeparator)
		{
			object[] paramArray = new object[16];
			paramArray[0] = filename;
			paramArray[1] = origin;
			paramArray[2] = startRow;
			paramArray[3] = dataType;
			paramArray[4] = textQualifier;
			paramArray[5] = consecutiveDelimiter;
			paramArray[6] = tab;
			paramArray[7] = semicolon;
			paramArray[8] = comma;
			paramArray[9] = space;
			paramArray[10] = other;
			paramArray[11] = otherChar;
			paramArray[12] = fieldInfo;
			paramArray[13] = textVisualLayout;
			paramArray[14] = decimalSeparator;
			paramArray[15] = thousandsSeparator;
			Invoker.Method(this, "OpenText", paramArray);
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14")]
		public void OpenText(string filename, object origin, object startRow, object dataType, LateBindingApi.Excel.Enums.XlTextQualifier textQualifier, object consecutiveDelimiter, object tab, object semicolon, object comma, object space, object other, object otherChar, object fieldInfo, object textVisualLayout, object decimalSeparator, object thousandsSeparator, object trailingMinusNumbers, object local)
		{
			object[] paramArray = new object[18];
			paramArray[0] = filename;
			paramArray[1] = origin;
			paramArray[2] = startRow;
			paramArray[3] = dataType;
			paramArray[4] = textQualifier;
			paramArray[5] = consecutiveDelimiter;
			paramArray[6] = tab;
			paramArray[7] = semicolon;
			paramArray[8] = comma;
			paramArray[9] = space;
			paramArray[10] = other;
			paramArray[11] = otherChar;
			paramArray[12] = fieldInfo;
			paramArray[13] = textVisualLayout;
			paramArray[14] = decimalSeparator;
			paramArray[15] = thousandsSeparator;
			paramArray[16] = trailingMinusNumbers;
			paramArray[17] = local;
			Invoker.Method(this, "OpenText", paramArray);
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14")]
		public LateBindingApi.Excel.Workbook _Open(string filename)
		{
			object[] paramArray = new object[1];
			paramArray[0] = filename;
			object returnValue = Invoker.MethodReturn(this, "_Open", paramArray);
			if(null == returnValue)
				return null;
			LateBindingApi.Excel.Workbook newClass = new LateBindingApi.Excel.Workbook(this, returnValue);
			return newClass;
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14")]
		public LateBindingApi.Excel.Workbook _Open(string filename, object updateLinks, object _readOnly, object format, object password, object writeResPassword, object ignoreReadOnlyRecommended, object origin, object delimiter, object editable, object notify, object converter, object addToMru)
		{
			object[] paramArray = new object[13];
			paramArray[0] = filename;
			paramArray[1] = updateLinks;
			paramArray[2] = _readOnly;
			paramArray[3] = format;
			paramArray[4] = password;
			paramArray[5] = writeResPassword;
			paramArray[6] = ignoreReadOnlyRecommended;
			paramArray[7] = origin;
			paramArray[8] = delimiter;
			paramArray[9] = editable;
			paramArray[10] = notify;
			paramArray[11] = converter;
			paramArray[12] = addToMru;
			object returnValue = Invoker.MethodReturn(this, "_Open", paramArray);
			if(null == returnValue)
				return null;
			LateBindingApi.Excel.Workbook newClass = new LateBindingApi.Excel.Workbook(this, returnValue);
			return newClass;
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14")]
		public void __OpenText(string filename, object origin, object startRow, object dataType, LateBindingApi.Excel.Enums.XlTextQualifier textQualifier)
		{
			object[] paramArray = new object[5];
			paramArray[0] = filename;
			paramArray[1] = origin;
			paramArray[2] = startRow;
			paramArray[3] = dataType;
			paramArray[4] = textQualifier;
			Invoker.Method(this, "__OpenText", paramArray);
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14")]
		public void __OpenText(string filename, object origin, object startRow, object dataType, LateBindingApi.Excel.Enums.XlTextQualifier textQualifier, object consecutiveDelimiter, object tab, object semicolon, object comma, object space, object other, object otherChar, object fieldInfo, object textVisualLayout)
		{
			object[] paramArray = new object[14];
			paramArray[0] = filename;
			paramArray[1] = origin;
			paramArray[2] = startRow;
			paramArray[3] = dataType;
			paramArray[4] = textQualifier;
			paramArray[5] = consecutiveDelimiter;
			paramArray[6] = tab;
			paramArray[7] = semicolon;
			paramArray[8] = comma;
			paramArray[9] = space;
			paramArray[10] = other;
			paramArray[11] = otherChar;
			paramArray[12] = fieldInfo;
			paramArray[13] = textVisualLayout;
			Invoker.Method(this, "__OpenText", paramArray);
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14")]
		public LateBindingApi.Excel.Workbook OpenDatabase(string filename)
		{
			object[] paramArray = new object[1];
			paramArray[0] = filename;
			object returnValue = Invoker.MethodReturn(this, "OpenDatabase", paramArray);
			if(null == returnValue)
				return null;
			LateBindingApi.Excel.Workbook newClass = new LateBindingApi.Excel.Workbook(this, returnValue);
			return newClass;
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14")]
		public LateBindingApi.Excel.Workbook OpenDatabase(string filename, object commandText, object commandType, object backgroundQuery, object importDataAs)
		{
			object[] paramArray = new object[5];
			paramArray[0] = filename;
			paramArray[1] = commandText;
			paramArray[2] = commandType;
			paramArray[3] = backgroundQuery;
			paramArray[4] = importDataAs;
			object returnValue = Invoker.MethodReturn(this, "OpenDatabase", paramArray);
			if(null == returnValue)
				return null;
			LateBindingApi.Excel.Workbook newClass = new LateBindingApi.Excel.Workbook(this, returnValue);
			return newClass;
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14")]
		public void CheckOut(string filename)
		{
			object[] paramArray = new object[1];
			paramArray[0] = filename;
			Invoker.Method(this, "CheckOut", paramArray);
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14")]
		public bool CanCheckOut(string filename)
		{
			object[] paramArray = new object[1];
			paramArray[0] = filename;
			object returnValue = Invoker.MethodReturn(this, "CanCheckOut", paramArray);
			return (bool)returnValue;
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14")]
		public LateBindingApi.Excel.Workbook OpenXML(string filename)
		{
			object[] paramArray = new object[1];
			paramArray[0] = filename;
			object returnValue = Invoker.MethodReturn(this, "OpenXML", paramArray);
			if(null == returnValue)
				return null;
			LateBindingApi.Excel.Workbook newClass = new LateBindingApi.Excel.Workbook(this, returnValue);
			return newClass;
		}

		[SupportByLibrary("XL10")]
		public LateBindingApi.Excel.Workbook OpenXML(string filename, object stylesheets)
		{
			object[] paramArray = new object[2];
			paramArray[0] = filename;
			paramArray[1] = stylesheets;
			object returnValue = Invoker.MethodReturn(this, "OpenXML", paramArray);
			if(null == returnValue)
				return null;
			LateBindingApi.Excel.Workbook newClass = new LateBindingApi.Excel.Workbook(this, returnValue);
			return newClass;
		}

		[SupportByLibrary("XL11","XL12","XL14")]
		public LateBindingApi.Excel.Workbook OpenXML(string filename, object stylesheets, object loadOption)
		{
			object[] paramArray = new object[3];
			paramArray[0] = filename;
			paramArray[1] = stylesheets;
			paramArray[2] = loadOption;
			object returnValue = Invoker.MethodReturn(this, "OpenXML", paramArray);
			if(null == returnValue)
				return null;
			LateBindingApi.Excel.Workbook newClass = new LateBindingApi.Excel.Workbook(this, returnValue);
			return newClass;
		}

		[SupportByLibrary("XL11","XL12","XL14")]
		public LateBindingApi.Excel.Workbook _OpenXML(string filename)
		{
			object[] paramArray = new object[1];
			paramArray[0] = filename;
			object returnValue = Invoker.MethodReturn(this, "_OpenXML", paramArray);
			if(null == returnValue)
				return null;
			LateBindingApi.Excel.Workbook newClass = new LateBindingApi.Excel.Workbook(this, returnValue);
			return newClass;
		}

		[SupportByLibrary("XL11","XL12","XL14")]
		public LateBindingApi.Excel.Workbook _OpenXML(string filename, object stylesheets)
		{
			object[] paramArray = new object[2];
			paramArray[0] = filename;
			paramArray[1] = stylesheets;
			object returnValue = Invoker.MethodReturn(this, "_OpenXML", paramArray);
			if(null == returnValue)
				return null;
			LateBindingApi.Excel.Workbook newClass = new LateBindingApi.Excel.Workbook(this, returnValue);
			return newClass;
		}

		#endregion

	}
}
