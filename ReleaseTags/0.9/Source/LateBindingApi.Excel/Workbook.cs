//Generated by LateBindingApi.CodeGenerator
using System;
using System.ComponentModel;
using LateBindingApi.Core;
namespace LateBindingApi.Excel
{
	[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
	public class Workbook : _Workbook, WorkbookEvents_Event
	{
		#region Fields

		WorkbookEvents_SinkHelper _sinkHelper;

		#endregion

		#region Construction

		public Workbook(COMObject parentObject, object comProxy) : base(parentObject, comProxy)
		{
			_sinkHelper = new WorkbookEvents_SinkHelper(this);
		}

		public Workbook(COMObject parentObject, object comProxy, Type comProxyType) : base(parentObject, comProxy, comProxyType)
		{
			_sinkHelper = new WorkbookEvents_SinkHelper(this);
		}

		public Workbook(COMObject replacedObject) : base(replacedObject)
		{
		}

		public Workbook()
		{
			CreateFromProgId("Excel.Workbook");
			_sinkHelper = new WorkbookEvents_SinkHelper(this);
		}

		public Workbook(string progId)
		{
			CreateFromProgId(progId);
			_sinkHelper = new WorkbookEvents_SinkHelper(this);
		}

		#endregion

        #region WorkbookEvents_Event Members
        
		#pragma warning disable
		public event WorkbookEvents_OpenEventHandler OpenEvent;
		public event WorkbookEvents_ActivateEventHandler ActivateEvent;
		public event WorkbookEvents_DeactivateEventHandler DeactivateEvent;
		public event WorkbookEvents_BeforeCloseEventHandler BeforeCloseEvent;
		public event WorkbookEvents_BeforeSaveEventHandler BeforeSaveEvent;
		public event WorkbookEvents_BeforePrintEventHandler BeforePrintEvent;
		public event WorkbookEvents_NewSheetEventHandler NewSheetEvent;
		public event WorkbookEvents_AddinInstallEventHandler AddinInstallEvent;
		public event WorkbookEvents_AddinUninstallEventHandler AddinUninstallEvent;
		public event WorkbookEvents_WindowResizeEventHandler WindowResizeEvent;
		public event WorkbookEvents_WindowActivateEventHandler WindowActivateEvent;
		public event WorkbookEvents_WindowDeactivateEventHandler WindowDeactivateEvent;
		public event WorkbookEvents_SheetSelectionChangeEventHandler SheetSelectionChangeEvent;
		public event WorkbookEvents_SheetBeforeDoubleClickEventHandler SheetBeforeDoubleClickEvent;
		public event WorkbookEvents_SheetBeforeRightClickEventHandler SheetBeforeRightClickEvent;
		public event WorkbookEvents_SheetActivateEventHandler SheetActivateEvent;
		public event WorkbookEvents_SheetDeactivateEventHandler SheetDeactivateEvent;
		public event WorkbookEvents_SheetCalculateEventHandler SheetCalculateEvent;
		public event WorkbookEvents_SheetChangeEventHandler SheetChangeEvent;
		public event WorkbookEvents_SheetFollowHyperlinkEventHandler SheetFollowHyperlinkEvent;
		public event WorkbookEvents_SheetPivotTableUpdateEventHandler SheetPivotTableUpdateEvent;
		public event WorkbookEvents_PivotTableCloseConnectionEventHandler PivotTableCloseConnectionEvent;
		public event WorkbookEvents_PivotTableOpenConnectionEventHandler PivotTableOpenConnectionEvent;
		public event WorkbookEvents_SyncEventHandler SyncEvent;
		public event WorkbookEvents_BeforeXmlImportEventHandler BeforeXmlImportEvent;
		public event WorkbookEvents_AfterXmlImportEventHandler AfterXmlImportEvent;
		public event WorkbookEvents_BeforeXmlExportEventHandler BeforeXmlExportEvent;
		public event WorkbookEvents_AfterXmlExportEventHandler AfterXmlExportEvent;
		public event WorkbookEvents_RowsetCompleteEventHandler RowsetCompleteEvent;
		public event WorkbookEvents_SheetPivotTableAfterValueChangeEventHandler SheetPivotTableAfterValueChangeEvent;
		public event WorkbookEvents_SheetPivotTableBeforeAllocateChangesEventHandler SheetPivotTableBeforeAllocateChangesEvent;
		public event WorkbookEvents_SheetPivotTableBeforeCommitChangesEventHandler SheetPivotTableBeforeCommitChangesEvent;
		public event WorkbookEvents_SheetPivotTableBeforeDiscardChangesEventHandler SheetPivotTableBeforeDiscardChangesEvent;
		public event WorkbookEvents_SheetPivotTableChangeSyncEventHandler SheetPivotTableChangeSyncEvent;
		public event WorkbookEvents_AfterSaveEventHandler AfterSaveEvent;
		public event WorkbookEvents_NewChartEventHandler NewChartEvent;

		#pragma warning restore
		
        [EditorBrowsable(EditorBrowsableState.Never), Browsable(false)]
        public bool CallEvent(string name, object[] paramArray)
        {
            Type thisType = this.GetType();

            MulticastDelegate eventDelegate = (MulticastDelegate)thisType.GetField(
												name, 
												System.Reflection.BindingFlags.Instance|
												System.Reflection.BindingFlags.NonPublic).GetValue(this);
            
            if(null!=eventDelegate)
            {            
				Delegate[] delegates = eventDelegate.GetInvocationList();
				
				foreach (Delegate invocation in delegates)
					invocation.Method.Invoke(invocation.Target, paramArray);
	                    
				return (delegates.Length > 0);
            }
            else
				return false;
        }

        [EditorBrowsable(EditorBrowsableState.Never), Browsable(false)]
        public void DisposeSinkHelper()
        {
            if (null != _sinkHelper)
			{
                _sinkHelper.Dispose();
				_sinkHelper.Dispose();
			}
        }
        
        #endregion 
	}
}
