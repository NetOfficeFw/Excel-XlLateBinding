//Generated by LateBindingApi.CodeGenerator
using System;
using System.Reflection;
using System.ComponentModel;
using System.Runtime.InteropServices;
using LateBindingApi.Core;
namespace LateBindingApi.Excel
{
	[SupportByLibrary("XL14")]
	public class Slicer : COMObject
	{
		#region Construction

		public Slicer(COMObject parentObject, object comProxy) : base(parentObject, comProxy)
		{
		}

		public Slicer(COMObject parentObject, object comProxy, Type comProxyType) : base(parentObject, comProxy, comProxyType)
		{
		}

		public Slicer(COMObject replacedObject) : base(replacedObject)
		{
		}

		public Slicer()
		{
		}

		#endregion

		#region Properties

		[SupportByLibrary("XL14")]
		public LateBindingApi.Excel.Application Application
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "Application");
				if(null == returnValue)
					return null;
				LateBindingApi.Excel.Application newClass = new LateBindingApi.Excel.Application(this, returnValue);
				return newClass;
			}
		}

		[SupportByLibrary("XL14")]
		public LateBindingApi.Excel.Enums.XlCreator Creator
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "Creator");
				return (LateBindingApi.Excel.Enums.XlCreator)returnValue;
			}
		}

		[SupportByLibrary("XL14")]
		public COMObject Parent
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "Parent");
				COMObject returnObject = LateBindingApi.Core.Factory.CreateObjectFromComProxy(this, returnValue);
				return returnObject;
			}
		}

		[SupportByLibrary("XL14")]
		public string Name
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "Name");
				return (string)returnValue;
			}
			set
			{
				Invoker.PropertySet(this, "Name", value);
			}						
		}


		[SupportByLibrary("XL14")]
		public string Caption
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "Caption");
				return (string)returnValue;
			}
			set
			{
				Invoker.PropertySet(this, "Caption", value);
			}						
		}


		[SupportByLibrary("XL14")]
		public Double Top
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "Top");
				return (Double)returnValue;
			}
			set
			{
				Invoker.PropertySet(this, "Top", value);
			}						
		}


		[SupportByLibrary("XL14")]
		public Double Left
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "Left");
				return (Double)returnValue;
			}
			set
			{
				Invoker.PropertySet(this, "Left", value);
			}						
		}


		[SupportByLibrary("XL14")]
		public bool DisableMoveResizeUI
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "DisableMoveResizeUI");
				return (bool)returnValue;
			}
			set
			{
				Invoker.PropertySet(this, "DisableMoveResizeUI", value);
			}						
		}


		[SupportByLibrary("XL14")]
		public Double Width
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "Width");
				return (Double)returnValue;
			}
			set
			{
				Invoker.PropertySet(this, "Width", value);
			}						
		}


		[SupportByLibrary("XL14")]
		public Double Height
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "Height");
				return (Double)returnValue;
			}
			set
			{
				Invoker.PropertySet(this, "Height", value);
			}						
		}


		[SupportByLibrary("XL14")]
		public Double RowHeight
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "RowHeight");
				return (Double)returnValue;
			}
			set
			{
				Invoker.PropertySet(this, "RowHeight", value);
			}						
		}


		[SupportByLibrary("XL14")]
		public Double ColumnWidth
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "ColumnWidth");
				return (Double)returnValue;
			}
			set
			{
				Invoker.PropertySet(this, "ColumnWidth", value);
			}						
		}


		[SupportByLibrary("XL14")]
		public Int32 NumberOfColumns
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "NumberOfColumns");
				return (Int32)returnValue;
			}
			set
			{
				Invoker.PropertySet(this, "NumberOfColumns", value);
			}						
		}


		[SupportByLibrary("XL14")]
		public bool DisplayHeader
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "DisplayHeader");
				return (bool)returnValue;
			}
			set
			{
				Invoker.PropertySet(this, "DisplayHeader", value);
			}						
		}


		[SupportByLibrary("XL14")]
		public bool Locked
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "Locked");
				return (bool)returnValue;
			}
			set
			{
				Invoker.PropertySet(this, "Locked", value);
			}						
		}


		[SupportByLibrary("XL14")]
		public LateBindingApi.Excel.SlicerCache SlicerCache
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "SlicerCache");
				if(null == returnValue)
					return null;
				LateBindingApi.Excel.SlicerCache newClass = new LateBindingApi.Excel.SlicerCache(this, returnValue);
				return newClass;
			}
		}

		[SupportByLibrary("XL14")]
		public LateBindingApi.Excel.SlicerCacheLevel SlicerCacheLevel
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "SlicerCacheLevel");
				if(null == returnValue)
					return null;
				LateBindingApi.Excel.SlicerCacheLevel newClass = new LateBindingApi.Excel.SlicerCacheLevel(this, returnValue);
				return newClass;
			}
		}

		[SupportByLibrary("XL14")]
		public LateBindingApi.Excel.Shape Shape
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "Shape");
				if(null == returnValue)
					return null;
				LateBindingApi.Excel.Shape newClass = new LateBindingApi.Excel.Shape(this, returnValue);
				return newClass;
			}
		}

		[SupportByLibrary("XL14")]
		public COMVariant Style
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "Style");
				COMVariant returnObject = LateBindingApi.Core.Factory.CreateVariantFromComProxy(this, returnValue);
				return returnObject;
			}
			set
			{
				Invoker.PropertySet(this, "Style", value);
			}						
		}


		[SupportByLibrary("XL14")]
		public LateBindingApi.Excel.SlicerItem ActiveItem
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "ActiveItem");
				if(null == returnValue)
					return null;
				LateBindingApi.Excel.SlicerItem newClass = new LateBindingApi.Excel.SlicerItem(this, returnValue);
				return newClass;
			}
		}

		#endregion

		#region Methods

		[SupportByLibrary("XL14")]
		public void Delete()
		{
			Invoker.Method(this, "Delete", null);
		}

		[SupportByLibrary("XL14")]
		public void Cut()
		{
			Invoker.Method(this, "Cut", null);
		}

		[SupportByLibrary("XL14")]
		public void Copy()
		{
			Invoker.Method(this, "Copy", null);
		}

		#endregion

	}
}
