//Generated by LateBindingApi.CodeGenerator
using System;
using System.Reflection;
using System.ComponentModel;
using System.Runtime.InteropServices;
using LateBindingApi.Core;
using System.Collections;
namespace LateBindingApi.Office
{
	[SupportByLibrary("OF10","OF11","OF12","OF14","OF9")]
	public class ShapeNodes : _IMsoDispObj
	{
		#region Construction

		public ShapeNodes(COMObject parentObject, object comProxy) : base(parentObject, comProxy)
		{
		}

		public ShapeNodes(COMObject parentObject, object comProxy, Type comProxyType) : base(parentObject, comProxy, comProxyType)
		{
		}

		public ShapeNodes(COMObject replacedObject) : base(replacedObject)
		{
		}

		public ShapeNodes()
		{
		}

		#endregion

		#region Properties

		[SupportByLibrary("OF10","OF11","OF12","OF14","OF9")]
		public COMObject Parent
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "Parent");
				COMObject returnObject = LateBindingApi.Core.Factory.CreateObjectFromComProxy(this, returnValue);
				return returnObject;
			}
		}

		[SupportByLibrary("OF10","OF11","OF12","OF14","OF9")]
		public Int32 Count
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "Count");
				return (Int32)returnValue;
			}
		}

		[SupportByLibrary("OF10","OF11","OF12","OF14","OF9")]
		public IEnumerator GetEnumerator()
		{
			object enumProxy = Invoker.PropertyGet(this, "_NewEnum");
			COMObject enumerator = new COMObject(this, enumProxy);
			Invoker.Method(enumerator, "Reset", null);
			bool isMoveNextTrue = (bool)Invoker.MethodReturn(enumerator, "MoveNext", null);
            while (true == isMoveNextTrue)
            {
                object itemProxy = Invoker.PropertyGet(enumerator, "Current", null);
				LateBindingApi.Office.ShapeNode returnClass = new LateBindingApi.Office.ShapeNode (this, itemProxy);
				isMoveNextTrue = (bool)Invoker.MethodReturn(enumerator, "MoveNext", null);
				yield return returnClass;
            }
		}

		#endregion

		#region Methods

		[SupportByLibrary("OF10","OF11","OF12","OF14","OF9")]
		public LateBindingApi.Office.ShapeNode this[object index]
		{
			get
			{
				object[] paramArray = new object[1];
				paramArray[0] = index;		
				object returnValue = Invoker.MethodReturn(this, "Item", paramArray);
				if(null == returnValue)
					return null;
				LateBindingApi.Office.ShapeNode newClass = new LateBindingApi.Office.ShapeNode(this, returnValue);
				return newClass;
			}
		}

		[SupportByLibrary("OF10","OF11","OF12","OF14","OF9")]
		public void Delete(Int32 index)
		{
			object[] paramArray = new object[1];
			paramArray[0] = index;
			Invoker.Method(this, "Delete", paramArray);
		}

		[SupportByLibrary("OF10","OF11","OF12","OF14","OF9")]
		public void Insert(Int32 index, LateBindingApi.Office.Enums.MsoSegmentType segmentType, LateBindingApi.Office.Enums.MsoEditingType editingType, Double x1, Double y1, Double x2, Double y2, Double x3, Double y3)
		{
			object[] paramArray = new object[9];
			paramArray[0] = index;
			paramArray[1] = segmentType;
			paramArray[2] = editingType;
			paramArray[3] = x1;
			paramArray[4] = y1;
			paramArray[5] = x2;
			paramArray[6] = y2;
			paramArray[7] = x3;
			paramArray[8] = y3;
			Invoker.Method(this, "Insert", paramArray);
		}

		[SupportByLibrary("OF10","OF11","OF12","OF14","OF9")]
		public void SetEditingType(Int32 index, LateBindingApi.Office.Enums.MsoEditingType editingType)
		{
			object[] paramArray = new object[2];
			paramArray[0] = index;
			paramArray[1] = editingType;
			Invoker.Method(this, "SetEditingType", paramArray);
		}

		[SupportByLibrary("OF10","OF11","OF12","OF14","OF9")]
		public void SetPosition(Int32 index, Double x1, Double y1)
		{
			object[] paramArray = new object[3];
			paramArray[0] = index;
			paramArray[1] = x1;
			paramArray[2] = y1;
			Invoker.Method(this, "SetPosition", paramArray);
		}

		[SupportByLibrary("OF10","OF11","OF12","OF14","OF9")]
		public void SetSegmentType(Int32 index, LateBindingApi.Office.Enums.MsoSegmentType segmentType)
		{
			object[] paramArray = new object[2];
			paramArray[0] = index;
			paramArray[1] = segmentType;
			Invoker.Method(this, "SetSegmentType", paramArray);
		}

		#endregion

	}
}
