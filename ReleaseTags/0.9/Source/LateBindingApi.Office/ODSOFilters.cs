//Generated by LateBindingApi.CodeGenerator
using System;
using System.Reflection;
using System.ComponentModel;
using System.Runtime.InteropServices;
using LateBindingApi.Core;
namespace LateBindingApi.Office
{
	[SupportByLibrary("OF10","OF11","OF12","OF14")]
	public class ODSOFilters : _IMsoDispObj
	{
		#region Construction

		public ODSOFilters(COMObject parentObject, object comProxy) : base(parentObject, comProxy)
		{
		}

		public ODSOFilters(COMObject parentObject, object comProxy, Type comProxyType) : base(parentObject, comProxy, comProxyType)
		{
		}

		public ODSOFilters(COMObject replacedObject) : base(replacedObject)
		{
		}

		public ODSOFilters()
		{
		}

		#endregion

		#region Properties

		[SupportByLibrary("OF10","OF11","OF12","OF14")]
		public Int32 Count
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "Count");
				return (Int32)returnValue;
			}
		}

		[SupportByLibrary("OF10","OF11","OF12","OF14")]
		public COMObject Parent
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "Parent");
				COMObject returnObject = LateBindingApi.Core.Factory.CreateObjectFromComProxy(this, returnValue);
				return returnObject;
			}
		}

		#endregion

		#region Methods

		[SupportByLibrary("OF10","OF11","OF12","OF14")]
		public COMObject Item(Int32 index)
		{
			object[] paramArray = new object[1];
			paramArray[0] = index;
			object returnValue = Invoker.MethodReturn(this, "Item", paramArray);
			COMObject returnObject = LateBindingApi.Core.Factory.CreateObjectFromComProxy(this, returnValue);
			return returnObject;
		}

		[SupportByLibrary("OF10","OF11","OF12","OF14")]
		public void Add(string column, LateBindingApi.Office.Enums.MsoFilterComparison comparison, LateBindingApi.Office.Enums.MsoFilterConjunction conjunction, string bstrCompareTo, bool deferUpdate)
		{
			object[] paramArray = new object[5];
			paramArray[0] = column;
			paramArray[1] = comparison;
			paramArray[2] = conjunction;
			paramArray[3] = bstrCompareTo;
			paramArray[4] = deferUpdate;
			Invoker.Method(this, "Add", paramArray);
		}

		[SupportByLibrary("OF10","OF11","OF12","OF14")]
		public void Delete(Int32 index, bool deferUpdate)
		{
			object[] paramArray = new object[2];
			paramArray[0] = index;
			paramArray[1] = deferUpdate;
			Invoker.Method(this, "Delete", paramArray);
		}

		#endregion

	}
}
