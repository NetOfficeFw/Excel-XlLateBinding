//Generated by LateBindingApi.CodeGenerator
using System;
using System.Reflection;
using System.ComponentModel;
using System.Runtime.InteropServices;
using LateBindingApi.Core;
namespace LateBindingApi.Office
{
	[SupportByLibrary("OF12","OF14")]
	public class ThemeFontScheme : _IMsoDispObj
	{
		#region Construction

		public ThemeFontScheme(COMObject parentObject, object comProxy) : base(parentObject, comProxy)
		{
		}

		public ThemeFontScheme(COMObject parentObject, object comProxy, Type comProxyType) : base(parentObject, comProxy, comProxyType)
		{
		}

		public ThemeFontScheme(COMObject replacedObject) : base(replacedObject)
		{
		}

		public ThemeFontScheme()
		{
		}

		#endregion

		#region Properties

		[SupportByLibrary("OF12","OF14")]
		public COMObject Parent
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "Parent");
				COMObject returnObject = LateBindingApi.Core.Factory.CreateObjectFromComProxy(this, returnValue);
				return returnObject;
			}
		}

		[SupportByLibrary("OF12","OF14")]
		public LateBindingApi.Office.ThemeFonts MinorFont
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "MinorFont");
				if(null == returnValue)
					return null;
				LateBindingApi.Office.ThemeFonts newClass = new LateBindingApi.Office.ThemeFonts(this, returnValue);
				return newClass;
			}
		}

		[SupportByLibrary("OF12","OF14")]
		public LateBindingApi.Office.ThemeFonts MajorFont
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "MajorFont");
				if(null == returnValue)
					return null;
				LateBindingApi.Office.ThemeFonts newClass = new LateBindingApi.Office.ThemeFonts(this, returnValue);
				return newClass;
			}
		}

		#endregion

		#region Methods

		[SupportByLibrary("OF12","OF14")]
		public void Load(string fileName)
		{
			object[] paramArray = new object[1];
			paramArray[0] = fileName;
			Invoker.Method(this, "Load", paramArray);
		}

		[SupportByLibrary("OF12","OF14")]
		public void Save(string fileName)
		{
			object[] paramArray = new object[1];
			paramArray[0] = fileName;
			Invoker.Method(this, "Save", paramArray);
		}

		#endregion

	}
}
