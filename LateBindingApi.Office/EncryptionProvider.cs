//Generated by LateBindingApi.CodeGenerator
using System;
using System.Reflection;
using System.ComponentModel;
using System.Runtime.InteropServices;
using LateBindingApi.Core;
namespace LateBindingApi.Office
{
	[SupportByLibrary("OF12","OF14")]
	public class EncryptionProvider : COMObject
	{
		#region Construction

		public EncryptionProvider(COMObject parentObject, object comProxy) : base(parentObject, comProxy)
		{
		}

		public EncryptionProvider(COMObject parentObject, object comProxy, Type comProxyType) : base(parentObject, comProxy, comProxyType)
		{
		}

		public EncryptionProvider(COMObject replacedObject) : base(replacedObject)
		{
		}

		public EncryptionProvider()
		{
		}

		#endregion

		#region Properties

		#endregion

		#region Methods

		[SupportByLibrary("OF12","OF14")]
		public COMVariant GetProviderDetail(LateBindingApi.Office.Enums.EncryptionProviderDetail encprovdet)
		{
			object[] paramArray = new object[1];
			paramArray[0] = encprovdet;
			object returnValue = Invoker.MethodReturn(this, "GetProviderDetail", paramArray);
			COMVariant returnObject = LateBindingApi.Core.Factory.CreateVariantFromComProxy(this, returnValue);
			return returnObject;
		}

		[SupportByLibrary("OF12","OF14")]
		public Int32 NewSession(object parentWindow)
		{
			object[] paramArray = new object[1];
			paramArray[0] = parentWindow;
			object returnValue = Invoker.MethodReturn(this, "NewSession", paramArray);
			return (Int32)returnValue;
		}

		[SupportByLibrary("OF12","OF14")]
		public Int32 Authenticate(object parentWindow, object encryptionData, object permissionsMask)
		{
			object[] paramArray = new object[3];
			paramArray[0] = parentWindow;
			paramArray[1] = encryptionData;
			paramArray.SetValue(permissionsMask,2);
			object returnValue = Invoker.MethodReturn(this, "Authenticate", paramArray);
			return (Int32)returnValue;
		}

		[SupportByLibrary("OF12","OF14")]
		public Int32 CloneSession(Int32 sessionHandle)
		{
			object[] paramArray = new object[1];
			paramArray[0] = sessionHandle;
			object returnValue = Invoker.MethodReturn(this, "CloneSession", paramArray);
			return (Int32)returnValue;
		}

		[SupportByLibrary("OF12","OF14")]
		public void EndSession(Int32 sessionHandle)
		{
			object[] paramArray = new object[1];
			paramArray[0] = sessionHandle;
			Invoker.Method(this, "EndSession", paramArray);
		}

		[SupportByLibrary("OF12","OF14")]
		public Int32 Save(Int32 sessionHandle, object encryptionData)
		{
			object[] paramArray = new object[2];
			paramArray[0] = sessionHandle;
			paramArray[1] = encryptionData;
			object returnValue = Invoker.MethodReturn(this, "Save", paramArray);
			return (Int32)returnValue;
		}

		[SupportByLibrary("OF12","OF14")]
		public void EncryptStream(Int32 sessionHandle, string streamName, object unencryptedStream, object encryptedStream)
		{
			object[] paramArray = new object[4];
			paramArray[0] = sessionHandle;
			paramArray[1] = streamName;
			paramArray[2] = unencryptedStream;
			paramArray[3] = encryptedStream;
			Invoker.Method(this, "EncryptStream", paramArray);
		}

		[SupportByLibrary("OF12","OF14")]
		public void DecryptStream(Int32 sessionHandle, string streamName, object encryptedStream, object unencryptedStream)
		{
			object[] paramArray = new object[4];
			paramArray[0] = sessionHandle;
			paramArray[1] = streamName;
			paramArray[2] = encryptedStream;
			paramArray[3] = unencryptedStream;
			Invoker.Method(this, "DecryptStream", paramArray);
		}

		[SupportByLibrary("OF12","OF14")]
		public void ShowSettings(Int32 sessionHandle, object parentWindow, bool _readOnly, bool remove)
		{
			object[] paramArray = new object[4];
			paramArray[0] = sessionHandle;
			paramArray[1] = parentWindow;
			paramArray[2] = _readOnly;
			paramArray.SetValue(remove,3);
			Invoker.Method(this, "ShowSettings", paramArray);
		}

		#endregion

	}
}
