//Generated by LateBindingApi.CodeGenerator
using System;
using System.Reflection;
using System.ComponentModel;
using System.Runtime.InteropServices;
using LateBindingApi.Core;
namespace LateBindingApi.Excel
{
	[SupportByLibrary("XL14")]
	public class SlicerCache : COMObject
	{
		#region Construction

		public SlicerCache(COMObject parentObject, object comProxy) : base(parentObject, comProxy)
		{
		}

		public SlicerCache(COMObject parentObject, object comProxy, Type comProxyType) : base(parentObject, comProxy, comProxyType)
		{
		}

		public SlicerCache(COMObject replacedObject) : base(replacedObject)
		{
		}

		public SlicerCache()
		{
		}

		#endregion

		#region Properties

		[SupportByLibrary("XL14")]
		public LateBindingApi.Excel.Application Application
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "Application");
				if(null == returnValue)
					return null;
				LateBindingApi.Excel.Application newClass = new LateBindingApi.Excel.Application(this, returnValue);
				return newClass;
			}
		}

		[SupportByLibrary("XL14")]
		public LateBindingApi.Excel.Enums.XlCreator Creator
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "Creator");
				return (LateBindingApi.Excel.Enums.XlCreator)returnValue;
			}
		}

		[SupportByLibrary("XL14")]
		public COMObject Parent
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "Parent");
				COMObject returnObject = LateBindingApi.Core.Factory.CreateObjectFromComProxy(this, returnValue);
				return returnObject;
			}
		}

		[SupportByLibrary("XL14")]
		public Int32 Index
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "Index");
				return (Int32)returnValue;
			}
		}

		[SupportByLibrary("XL14")]
		public bool OLAP
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "OLAP");
				return (bool)returnValue;
			}
		}

		[SupportByLibrary("XL14")]
		public LateBindingApi.Excel.Enums.XlPivotTableSourceType SourceType
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "SourceType");
				return (LateBindingApi.Excel.Enums.XlPivotTableSourceType)returnValue;
			}
		}

		[SupportByLibrary("XL14")]
		public LateBindingApi.Excel.WorkbookConnection WorkbookConnection
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "WorkbookConnection");
				if(null == returnValue)
					return null;
				LateBindingApi.Excel.WorkbookConnection newClass = new LateBindingApi.Excel.WorkbookConnection(this, returnValue);
				return newClass;
			}
		}

		[SupportByLibrary("XL14")]
		public LateBindingApi.Excel.Slicers Slicers
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "Slicers");
				if(null == returnValue)
					return null;
				LateBindingApi.Excel.Slicers newClass = new LateBindingApi.Excel.Slicers(this, returnValue);
				return newClass;
			}
		}

		[SupportByLibrary("XL14")]
		public LateBindingApi.Excel.SlicerPivotTables PivotTables
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "PivotTables");
				if(null == returnValue)
					return null;
				LateBindingApi.Excel.SlicerPivotTables newClass = new LateBindingApi.Excel.SlicerPivotTables(this, returnValue);
				return newClass;
			}
		}

		[SupportByLibrary("XL14")]
		public LateBindingApi.Excel.SlicerCacheLevels SlicerCacheLevels
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "SlicerCacheLevels");
				if(null == returnValue)
					return null;
				LateBindingApi.Excel.SlicerCacheLevels newClass = new LateBindingApi.Excel.SlicerCacheLevels(this, returnValue);
				return newClass;
			}
		}

		[SupportByLibrary("XL14")]
		public string Name
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "Name");
				return (string)returnValue;
			}
			set
			{
				Invoker.PropertySet(this, "Name", value);
			}						
		}


		[SupportByLibrary("XL14")]
		public LateBindingApi.Excel.SlicerItems VisibleSlicerItems
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "VisibleSlicerItems");
				if(null == returnValue)
					return null;
				LateBindingApi.Excel.SlicerItems newClass = new LateBindingApi.Excel.SlicerItems(this, returnValue);
				return newClass;
			}
		}

		[SupportByLibrary("XL14")]
		public COMVariant VisibleSlicerItemsList
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "VisibleSlicerItemsList");
				COMVariant returnObject = LateBindingApi.Core.Factory.CreateVariantFromComProxy(this, returnValue);
				return returnObject;
			}
			set
			{
				Invoker.PropertySet(this, "VisibleSlicerItemsList", value);
			}						
		}


		[SupportByLibrary("XL14")]
		public LateBindingApi.Excel.SlicerItems SlicerItems
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "SlicerItems");
				if(null == returnValue)
					return null;
				LateBindingApi.Excel.SlicerItems newClass = new LateBindingApi.Excel.SlicerItems(this, returnValue);
				return newClass;
			}
		}

		[SupportByLibrary("XL14")]
		public LateBindingApi.Excel.Enums.XlSlicerCrossFilterType CrossFilterType
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "CrossFilterType");
				return (LateBindingApi.Excel.Enums.XlSlicerCrossFilterType)returnValue;
			}
			set
			{
				Invoker.PropertySet(this, "CrossFilterType", value);
			}						
		}


		[SupportByLibrary("XL14")]
		public LateBindingApi.Excel.Enums.XlSlicerSort SortItems
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "SortItems");
				return (LateBindingApi.Excel.Enums.XlSlicerSort)returnValue;
			}
			set
			{
				Invoker.PropertySet(this, "SortItems", value);
			}						
		}


		[SupportByLibrary("XL14")]
		public string SourceName
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "SourceName");
				return (string)returnValue;
			}
		}

		[SupportByLibrary("XL14")]
		public bool SortUsingCustomLists
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "SortUsingCustomLists");
				return (bool)returnValue;
			}
			set
			{
				Invoker.PropertySet(this, "SortUsingCustomLists", value);
			}						
		}


		[SupportByLibrary("XL14")]
		public bool ShowAllItems
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "ShowAllItems");
				return (bool)returnValue;
			}
			set
			{
				Invoker.PropertySet(this, "ShowAllItems", value);
			}						
		}


		#endregion

		#region Methods

		[SupportByLibrary("XL14")]
		public void ClearManualFilter()
		{
			Invoker.Method(this, "ClearManualFilter", null);
		}

		[SupportByLibrary("XL14")]
		public void Delete()
		{
			Invoker.Method(this, "Delete", null);
		}

		#endregion

	}
}
