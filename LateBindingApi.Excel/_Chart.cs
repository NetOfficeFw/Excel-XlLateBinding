//Generated by LateBindingApi.CodeGenerator
using System;
using System.Reflection;
using System.ComponentModel;
using System.Runtime.InteropServices;
using LateBindingApi.Core;
namespace LateBindingApi.Excel
{
	[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
	public class _Chart : COMObject
	{
		#region Construction

		public _Chart(COMObject parentObject, object comProxy) : base(parentObject, comProxy)
		{
		}

		public _Chart(COMObject parentObject, object comProxy, Type comProxyType) : base(parentObject, comProxy, comProxyType)
		{
		}

		public _Chart(COMObject replacedObject) : base(replacedObject)
		{
		}

		public _Chart()
		{
		}

		#endregion

		#region Properties

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public LateBindingApi.Excel.Application Application
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "Application");
				if(null == returnValue)
					return null;
				LateBindingApi.Excel.Application newClass = new LateBindingApi.Excel.Application(this, returnValue);
				return newClass;
			}
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public LateBindingApi.Excel.Enums.XlCreator Creator
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "Creator");
				return (LateBindingApi.Excel.Enums.XlCreator)returnValue;
			}
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public COMObject Parent
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "Parent");
				COMObject returnObject = LateBindingApi.Core.Factory.CreateObjectFromComProxy(this, returnValue);
				return returnObject;
			}
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public string CodeName
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "CodeName");
				return (string)returnValue;
			}
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public string _CodeName
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "_CodeName");
				return (string)returnValue;
			}
			set
			{
				Invoker.PropertySet(this, "_CodeName", value);
			}						
		}


		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public Int32 Index
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "Index");
				return (Int32)returnValue;
			}
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public string Name
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "Name");
				return (string)returnValue;
			}
			set
			{
				Invoker.PropertySet(this, "Name", value);
			}						
		}


		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public COMObject Next
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "Next");
				COMObject returnObject = LateBindingApi.Core.Factory.CreateObjectFromComProxy(this, returnValue);
				return returnObject;
			}
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public string OnDoubleClick
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "OnDoubleClick");
				return (string)returnValue;
			}
			set
			{
				Invoker.PropertySet(this, "OnDoubleClick", value);
			}						
		}


		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public string OnSheetActivate
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "OnSheetActivate");
				return (string)returnValue;
			}
			set
			{
				Invoker.PropertySet(this, "OnSheetActivate", value);
			}						
		}


		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public string OnSheetDeactivate
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "OnSheetDeactivate");
				return (string)returnValue;
			}
			set
			{
				Invoker.PropertySet(this, "OnSheetDeactivate", value);
			}						
		}


		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public LateBindingApi.Excel.PageSetup PageSetup
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "PageSetup");
				if(null == returnValue)
					return null;
				LateBindingApi.Excel.PageSetup newClass = new LateBindingApi.Excel.PageSetup(this, returnValue);
				return newClass;
			}
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public COMObject Previous
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "Previous");
				COMObject returnObject = LateBindingApi.Core.Factory.CreateObjectFromComProxy(this, returnValue);
				return returnObject;
			}
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public bool ProtectContents
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "ProtectContents");
				return (bool)returnValue;
			}
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public bool ProtectDrawingObjects
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "ProtectDrawingObjects");
				return (bool)returnValue;
			}
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public bool ProtectionMode
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "ProtectionMode");
				return (bool)returnValue;
			}
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public LateBindingApi.Excel.Enums.XlSheetVisibility Visible
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "Visible");
				return (LateBindingApi.Excel.Enums.XlSheetVisibility)returnValue;
			}
			set
			{
				Invoker.PropertySet(this, "Visible", value);
			}						
		}


		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public LateBindingApi.Excel.Shapes Shapes
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "Shapes");
				if(null == returnValue)
					return null;
				LateBindingApi.Excel.Shapes newClass = new LateBindingApi.Excel.Shapes(this, returnValue);
				return newClass;
			}
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public LateBindingApi.Excel.ChartGroup Area3DGroup
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "Area3DGroup");
				if(null == returnValue)
					return null;
				LateBindingApi.Excel.ChartGroup newClass = new LateBindingApi.Excel.ChartGroup(this, returnValue);
				return newClass;
			}
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public bool AutoScaling
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "AutoScaling");
				return (bool)returnValue;
			}
			set
			{
				Invoker.PropertySet(this, "AutoScaling", value);
			}						
		}


		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public LateBindingApi.Excel.ChartGroup Bar3DGroup
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "Bar3DGroup");
				if(null == returnValue)
					return null;
				LateBindingApi.Excel.ChartGroup newClass = new LateBindingApi.Excel.ChartGroup(this, returnValue);
				return newClass;
			}
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public LateBindingApi.Excel.ChartArea ChartArea
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "ChartArea");
				if(null == returnValue)
					return null;
				LateBindingApi.Excel.ChartArea newClass = new LateBindingApi.Excel.ChartArea(this, returnValue);
				return newClass;
			}
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public LateBindingApi.Excel.ChartTitle ChartTitle
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "ChartTitle");
				if(null == returnValue)
					return null;
				LateBindingApi.Excel.ChartTitle newClass = new LateBindingApi.Excel.ChartTitle(this, returnValue);
				return newClass;
			}
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public LateBindingApi.Excel.ChartGroup Column3DGroup
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "Column3DGroup");
				if(null == returnValue)
					return null;
				LateBindingApi.Excel.ChartGroup newClass = new LateBindingApi.Excel.ChartGroup(this, returnValue);
				return newClass;
			}
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public LateBindingApi.Excel.Corners Corners
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "Corners");
				if(null == returnValue)
					return null;
				LateBindingApi.Excel.Corners newClass = new LateBindingApi.Excel.Corners(this, returnValue);
				return newClass;
			}
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public LateBindingApi.Excel.DataTable DataTable
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "DataTable");
				if(null == returnValue)
					return null;
				LateBindingApi.Excel.DataTable newClass = new LateBindingApi.Excel.DataTable(this, returnValue);
				return newClass;
			}
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public Int32 DepthPercent
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "DepthPercent");
				return (Int32)returnValue;
			}
			set
			{
				Invoker.PropertySet(this, "DepthPercent", value);
			}						
		}


		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public LateBindingApi.Excel.Enums.XlDisplayBlanksAs DisplayBlanksAs
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "DisplayBlanksAs");
				return (LateBindingApi.Excel.Enums.XlDisplayBlanksAs)returnValue;
			}
			set
			{
				Invoker.PropertySet(this, "DisplayBlanksAs", value);
			}						
		}


		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public Int32 Elevation
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "Elevation");
				return (Int32)returnValue;
			}
			set
			{
				Invoker.PropertySet(this, "Elevation", value);
			}						
		}


		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public LateBindingApi.Excel.Floor Floor
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "Floor");
				if(null == returnValue)
					return null;
				LateBindingApi.Excel.Floor newClass = new LateBindingApi.Excel.Floor(this, returnValue);
				return newClass;
			}
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public Int32 GapDepth
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "GapDepth");
				return (Int32)returnValue;
			}
			set
			{
				Invoker.PropertySet(this, "GapDepth", value);
			}						
		}


		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public COMVariant HasAxis
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "HasAxis", null);
				COMVariant returnObject = LateBindingApi.Core.Factory.CreateVariantFromComProxy(this, returnValue);
				return returnObject;
			}
			set
			{
				Invoker.PropertySet(this, "HasAxis", value);
			}						
		}


		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public COMVariant get_HasAxis(object index1, object index2)
		{
			object[] paramArray = new object[2];
			paramArray[0] = index1;
			paramArray[1] = index2;
				object returnValue = Invoker.PropertyGet(this, "HasAxis", paramArray);
				COMVariant returnObject = LateBindingApi.Core.Factory.CreateVariantFromComProxy(this, returnValue);
				return returnObject;
		}
		
		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public void set_HasAxis(object index1, object index2, object value)
		{
			object[] paramArray = new object[2];
			paramArray[0] = index1;
			paramArray[1] = index2;
			Invoker.PropertySet(this, "HasAxis", paramArray, value);
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public bool HasDataTable
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "HasDataTable");
				return (bool)returnValue;
			}
			set
			{
				Invoker.PropertySet(this, "HasDataTable", value);
			}						
		}


		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public bool HasLegend
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "HasLegend");
				return (bool)returnValue;
			}
			set
			{
				Invoker.PropertySet(this, "HasLegend", value);
			}						
		}


		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public bool HasTitle
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "HasTitle");
				return (bool)returnValue;
			}
			set
			{
				Invoker.PropertySet(this, "HasTitle", value);
			}						
		}


		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public Int32 HeightPercent
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "HeightPercent");
				return (Int32)returnValue;
			}
			set
			{
				Invoker.PropertySet(this, "HeightPercent", value);
			}						
		}


		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public LateBindingApi.Excel.Hyperlinks Hyperlinks
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "Hyperlinks");
				if(null == returnValue)
					return null;
				LateBindingApi.Excel.Hyperlinks newClass = new LateBindingApi.Excel.Hyperlinks(this, returnValue);
				return newClass;
			}
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public LateBindingApi.Excel.Legend Legend
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "Legend");
				if(null == returnValue)
					return null;
				LateBindingApi.Excel.Legend newClass = new LateBindingApi.Excel.Legend(this, returnValue);
				return newClass;
			}
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public LateBindingApi.Excel.ChartGroup Line3DGroup
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "Line3DGroup");
				if(null == returnValue)
					return null;
				LateBindingApi.Excel.ChartGroup newClass = new LateBindingApi.Excel.ChartGroup(this, returnValue);
				return newClass;
			}
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public Int32 Perspective
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "Perspective");
				return (Int32)returnValue;
			}
			set
			{
				Invoker.PropertySet(this, "Perspective", value);
			}						
		}


		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public LateBindingApi.Excel.ChartGroup Pie3DGroup
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "Pie3DGroup");
				if(null == returnValue)
					return null;
				LateBindingApi.Excel.ChartGroup newClass = new LateBindingApi.Excel.ChartGroup(this, returnValue);
				return newClass;
			}
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public LateBindingApi.Excel.PlotArea PlotArea
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "PlotArea");
				if(null == returnValue)
					return null;
				LateBindingApi.Excel.PlotArea newClass = new LateBindingApi.Excel.PlotArea(this, returnValue);
				return newClass;
			}
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public bool PlotVisibleOnly
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "PlotVisibleOnly");
				return (bool)returnValue;
			}
			set
			{
				Invoker.PropertySet(this, "PlotVisibleOnly", value);
			}						
		}


		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public COMVariant RightAngleAxes
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "RightAngleAxes");
				COMVariant returnObject = LateBindingApi.Core.Factory.CreateVariantFromComProxy(this, returnValue);
				return returnObject;
			}
			set
			{
				Invoker.PropertySet(this, "RightAngleAxes", value);
			}						
		}


		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public COMVariant Rotation
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "Rotation");
				COMVariant returnObject = LateBindingApi.Core.Factory.CreateVariantFromComProxy(this, returnValue);
				return returnObject;
			}
			set
			{
				Invoker.PropertySet(this, "Rotation", value);
			}						
		}


		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public bool SizeWithWindow
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "SizeWithWindow");
				return (bool)returnValue;
			}
			set
			{
				Invoker.PropertySet(this, "SizeWithWindow", value);
			}						
		}


		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public bool ShowWindow
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "ShowWindow");
				return (bool)returnValue;
			}
			set
			{
				Invoker.PropertySet(this, "ShowWindow", value);
			}						
		}


		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public Int32 SubType
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "SubType");
				return (Int32)returnValue;
			}
			set
			{
				Invoker.PropertySet(this, "SubType", value);
			}						
		}


		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public LateBindingApi.Excel.ChartGroup SurfaceGroup
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "SurfaceGroup");
				if(null == returnValue)
					return null;
				LateBindingApi.Excel.ChartGroup newClass = new LateBindingApi.Excel.ChartGroup(this, returnValue);
				return newClass;
			}
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public Int32 Type
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "Type");
				return (Int32)returnValue;
			}
			set
			{
				Invoker.PropertySet(this, "Type", value);
			}						
		}


		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public LateBindingApi.Excel.Enums.XlChartType ChartType
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "ChartType");
				return (LateBindingApi.Excel.Enums.XlChartType)returnValue;
			}
			set
			{
				Invoker.PropertySet(this, "ChartType", value);
			}						
		}


		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public LateBindingApi.Excel.Walls Walls
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "Walls");
				if(null == returnValue)
					return null;
				LateBindingApi.Excel.Walls newClass = new LateBindingApi.Excel.Walls(this, returnValue);
				return newClass;
			}
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public bool WallsAndGridlines2D
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "WallsAndGridlines2D");
				return (bool)returnValue;
			}
			set
			{
				Invoker.PropertySet(this, "WallsAndGridlines2D", value);
			}						
		}


		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public LateBindingApi.Excel.Enums.XlBarShape BarShape
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "BarShape");
				return (LateBindingApi.Excel.Enums.XlBarShape)returnValue;
			}
			set
			{
				Invoker.PropertySet(this, "BarShape", value);
			}						
		}


		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public LateBindingApi.Excel.Enums.XlRowCol PlotBy
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "PlotBy");
				return (LateBindingApi.Excel.Enums.XlRowCol)returnValue;
			}
			set
			{
				Invoker.PropertySet(this, "PlotBy", value);
			}						
		}


		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public bool ProtectFormatting
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "ProtectFormatting");
				return (bool)returnValue;
			}
			set
			{
				Invoker.PropertySet(this, "ProtectFormatting", value);
			}						
		}


		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public bool ProtectData
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "ProtectData");
				return (bool)returnValue;
			}
			set
			{
				Invoker.PropertySet(this, "ProtectData", value);
			}						
		}


		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public bool ProtectGoalSeek
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "ProtectGoalSeek");
				return (bool)returnValue;
			}
			set
			{
				Invoker.PropertySet(this, "ProtectGoalSeek", value);
			}						
		}


		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public bool ProtectSelection
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "ProtectSelection");
				return (bool)returnValue;
			}
			set
			{
				Invoker.PropertySet(this, "ProtectSelection", value);
			}						
		}


		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public LateBindingApi.Excel.PivotLayout PivotLayout
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "PivotLayout");
				if(null == returnValue)
					return null;
				LateBindingApi.Excel.PivotLayout newClass = new LateBindingApi.Excel.PivotLayout(this, returnValue);
				return newClass;
			}
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public bool HasPivotFields
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "HasPivotFields");
				return (bool)returnValue;
			}
			set
			{
				Invoker.PropertySet(this, "HasPivotFields", value);
			}						
		}


		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public LateBindingApi.Office.Scripts Scripts
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "Scripts");
				if(null == returnValue)
					return null;
				LateBindingApi.Office.Scripts newClass = new LateBindingApi.Office.Scripts(this, returnValue);
				return newClass;
			}
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14")]
		public LateBindingApi.Excel.Tab Tab
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "Tab");
				if(null == returnValue)
					return null;
				LateBindingApi.Excel.Tab newClass = new LateBindingApi.Excel.Tab(this, returnValue);
				return newClass;
			}
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14")]
		public LateBindingApi.Office.MsoEnvelope MailEnvelope
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "MailEnvelope");
				if(null == returnValue)
					return null;
				LateBindingApi.Office.MsoEnvelope newClass = new LateBindingApi.Office.MsoEnvelope(this, returnValue);
				return newClass;
			}
		}

		[SupportByLibrary("XL12","XL14")]
		public bool ShowDataLabelsOverMaximum
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "ShowDataLabelsOverMaximum");
				return (bool)returnValue;
			}
			set
			{
				Invoker.PropertySet(this, "ShowDataLabelsOverMaximum", value);
			}						
		}


		[SupportByLibrary("XL12","XL14")]
		public LateBindingApi.Excel.Walls SideWall
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "SideWall");
				if(null == returnValue)
					return null;
				LateBindingApi.Excel.Walls newClass = new LateBindingApi.Excel.Walls(this, returnValue);
				return newClass;
			}
		}

		[SupportByLibrary("XL12","XL14")]
		public LateBindingApi.Excel.Walls BackWall
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "BackWall");
				if(null == returnValue)
					return null;
				LateBindingApi.Excel.Walls newClass = new LateBindingApi.Excel.Walls(this, returnValue);
				return newClass;
			}
		}

		[SupportByLibrary("XL12","XL14")]
		public COMVariant ChartStyle
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "ChartStyle");
				COMVariant returnObject = LateBindingApi.Core.Factory.CreateVariantFromComProxy(this, returnValue);
				return returnObject;
			}
			set
			{
				Invoker.PropertySet(this, "ChartStyle", value);
			}						
		}


		[SupportByLibrary("XL14")]
		public Int32 PrintedCommentPages
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "PrintedCommentPages");
				return (Int32)returnValue;
			}
		}

		[SupportByLibrary("XL14")]
		public bool Dummy24
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "Dummy24");
				return (bool)returnValue;
			}
			set
			{
				Invoker.PropertySet(this, "Dummy24", value);
			}						
		}


		[SupportByLibrary("XL14")]
		public bool Dummy25
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "Dummy25");
				return (bool)returnValue;
			}
			set
			{
				Invoker.PropertySet(this, "Dummy25", value);
			}						
		}


		[SupportByLibrary("XL14")]
		public bool ShowReportFilterFieldButtons
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "ShowReportFilterFieldButtons");
				return (bool)returnValue;
			}
			set
			{
				Invoker.PropertySet(this, "ShowReportFilterFieldButtons", value);
			}						
		}


		[SupportByLibrary("XL14")]
		public bool ShowLegendFieldButtons
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "ShowLegendFieldButtons");
				return (bool)returnValue;
			}
			set
			{
				Invoker.PropertySet(this, "ShowLegendFieldButtons", value);
			}						
		}


		[SupportByLibrary("XL14")]
		public bool ShowAxisFieldButtons
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "ShowAxisFieldButtons");
				return (bool)returnValue;
			}
			set
			{
				Invoker.PropertySet(this, "ShowAxisFieldButtons", value);
			}						
		}


		[SupportByLibrary("XL14")]
		public bool ShowValueFieldButtons
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "ShowValueFieldButtons");
				return (bool)returnValue;
			}
			set
			{
				Invoker.PropertySet(this, "ShowValueFieldButtons", value);
			}						
		}


		[SupportByLibrary("XL14")]
		public bool ShowAllFieldButtons
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "ShowAllFieldButtons");
				return (bool)returnValue;
			}
			set
			{
				Invoker.PropertySet(this, "ShowAllFieldButtons", value);
			}						
		}


		#endregion

		#region Methods

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public void Activate()
		{
			Invoker.Method(this, "Activate", null);
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public void Copy()
		{
			Invoker.Method(this, "Copy", null);
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public void Copy(object before, object after)
		{
			object[] paramArray = new object[2];
			paramArray[0] = before;
			paramArray[1] = after;
			Invoker.Method(this, "Copy", paramArray);
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public void Delete()
		{
			Invoker.Method(this, "Delete", null);
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public void Move()
		{
			Invoker.Method(this, "Move", null);
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public void Move(object before, object after)
		{
			object[] paramArray = new object[2];
			paramArray[0] = before;
			paramArray[1] = after;
			Invoker.Method(this, "Move", paramArray);
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public void _PrintOut()
		{
			Invoker.Method(this, "_PrintOut", null);
		}

		[SupportByLibrary("XL10","XL11","XL9")]
		public void _PrintOut(object from, object to, object copies, object preview, object activePrinter, object printToFile, object collate)
		{
			object[] paramArray = new object[7];
			paramArray[0] = from;
			paramArray[1] = to;
			paramArray[2] = copies;
			paramArray[3] = preview;
			paramArray[4] = activePrinter;
			paramArray[5] = printToFile;
			paramArray[6] = collate;
			Invoker.Method(this, "_PrintOut", paramArray);
		}

		[SupportByLibrary("XL12","XL14")]
		public void _PrintOut(object from, object to, object copies, object preview, object activePrinter, object printToFile, object collate, object prToFileName)
		{
			object[] paramArray = new object[8];
			paramArray[0] = from;
			paramArray[1] = to;
			paramArray[2] = copies;
			paramArray[3] = preview;
			paramArray[4] = activePrinter;
			paramArray[5] = printToFile;
			paramArray[6] = collate;
			paramArray[7] = prToFileName;
			Invoker.Method(this, "_PrintOut", paramArray);
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public void PrintPreview()
		{
			Invoker.Method(this, "PrintPreview", null);
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public void PrintPreview(object enableChanges)
		{
			object[] paramArray = new object[1];
			paramArray[0] = enableChanges;
			Invoker.Method(this, "PrintPreview", paramArray);
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public void Protect()
		{
			Invoker.Method(this, "Protect", null);
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public void Protect(object password, object drawingObjects, object contents, object scenarios, object userInterfaceOnly)
		{
			object[] paramArray = new object[5];
			paramArray[0] = password;
			paramArray[1] = drawingObjects;
			paramArray[2] = contents;
			paramArray[3] = scenarios;
			paramArray[4] = userInterfaceOnly;
			Invoker.Method(this, "Protect", paramArray);
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public void _Dummy23()
		{
			Invoker.Method(this, "_Dummy23", null);
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public void SaveAs(string filename)
		{
			object[] paramArray = new object[1];
			paramArray[0] = filename;
			Invoker.Method(this, "SaveAs", paramArray);
		}

		[SupportByLibrary("XL9")]
		public void SaveAs(string filename, object fileFormat, object password, object writeResPassword, object readOnlyRecommended, object createBackup, object addToMru, object textCodepage, object textVisualLayout)
		{
			object[] paramArray = new object[9];
			paramArray[0] = filename;
			paramArray[1] = fileFormat;
			paramArray[2] = password;
			paramArray[3] = writeResPassword;
			paramArray[4] = readOnlyRecommended;
			paramArray[5] = createBackup;
			paramArray[6] = addToMru;
			paramArray[7] = textCodepage;
			paramArray[8] = textVisualLayout;
			Invoker.Method(this, "SaveAs", paramArray);
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14")]
		public void SaveAs(string filename, object fileFormat, object password, object writeResPassword, object readOnlyRecommended, object createBackup, object addToMru, object textCodepage, object textVisualLayout, object local)
		{
			object[] paramArray = new object[10];
			paramArray[0] = filename;
			paramArray[1] = fileFormat;
			paramArray[2] = password;
			paramArray[3] = writeResPassword;
			paramArray[4] = readOnlyRecommended;
			paramArray[5] = createBackup;
			paramArray[6] = addToMru;
			paramArray[7] = textCodepage;
			paramArray[8] = textVisualLayout;
			paramArray[9] = local;
			Invoker.Method(this, "SaveAs", paramArray);
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public void Select()
		{
			Invoker.Method(this, "Select", null);
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public void Select(object replace)
		{
			object[] paramArray = new object[1];
			paramArray[0] = replace;
			Invoker.Method(this, "Select", paramArray);
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public void Unprotect()
		{
			Invoker.Method(this, "Unprotect", null);
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public void Unprotect(object password)
		{
			object[] paramArray = new object[1];
			paramArray[0] = password;
			Invoker.Method(this, "Unprotect", paramArray);
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public void ApplyDataLabels(LateBindingApi.Excel.Enums.XlDataLabelsType type)
		{
			object[] paramArray = new object[1];
			paramArray[0] = type;
			Invoker.Method(this, "ApplyDataLabels", paramArray);
		}

		[SupportByLibrary("XL9")]
		public void ApplyDataLabels(LateBindingApi.Excel.Enums.XlDataLabelsType type, object legendKey, object autoText, object hasLeaderLines)
		{
			object[] paramArray = new object[4];
			paramArray[0] = type;
			paramArray[1] = legendKey;
			paramArray[2] = autoText;
			paramArray[3] = hasLeaderLines;
			Invoker.Method(this, "ApplyDataLabels", paramArray);
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14")]
		public void ApplyDataLabels(LateBindingApi.Excel.Enums.XlDataLabelsType type, object legendKey, object autoText, object hasLeaderLines, object showSeriesName, object showCategoryName, object showValue, object showPercentage, object showBubbleSize, object separator)
		{
			object[] paramArray = new object[10];
			paramArray[0] = type;
			paramArray[1] = legendKey;
			paramArray[2] = autoText;
			paramArray[3] = hasLeaderLines;
			paramArray[4] = showSeriesName;
			paramArray[5] = showCategoryName;
			paramArray[6] = showValue;
			paramArray[7] = showPercentage;
			paramArray[8] = showBubbleSize;
			paramArray[9] = separator;
			Invoker.Method(this, "ApplyDataLabels", paramArray);
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public LateBindingApi.Excel.Arcs Arcs()
		{
			object returnValue = Invoker.MethodReturn(this, "Arcs", null);
			if(null == returnValue)
				return null;
			LateBindingApi.Excel.Arcs newClass = new LateBindingApi.Excel.Arcs(this, returnValue);
			return newClass;
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public LateBindingApi.Excel.Arc Arcs(object index)
		{
			object[] paramArray = new object[1];
			paramArray[0] = index;
			object returnValue = Invoker.MethodReturn(this, "Arcs", paramArray);
			if(null == returnValue)
				return null;
			LateBindingApi.Excel.Arc newClass = new LateBindingApi.Excel.Arc(this, returnValue);
			return newClass;
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public COMObject AreaGroups()
		{
			object returnValue = Invoker.MethodReturn(this, "AreaGroups", null);
			COMObject returnObject = LateBindingApi.Core.Factory.CreateObjectFromComProxy(this, returnValue);
			return returnObject;
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public COMObject AreaGroups(object index)
		{
			object[] paramArray = new object[1];
			paramArray[0] = index;
			object returnValue = Invoker.MethodReturn(this, "AreaGroups", paramArray);
			COMObject returnObject = LateBindingApi.Core.Factory.CreateObjectFromComProxy(this, returnValue);
			return returnObject;
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public void AutoFormat(Int32 gallery)
		{
			object[] paramArray = new object[1];
			paramArray[0] = gallery;
			Invoker.Method(this, "AutoFormat", paramArray);
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public void AutoFormat(Int32 gallery, object format)
		{
			object[] paramArray = new object[2];
			paramArray[0] = gallery;
			paramArray[1] = format;
			Invoker.Method(this, "AutoFormat", paramArray);
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public COMObject Axes(object type, LateBindingApi.Excel.Enums.XlAxisGroup axisGroup)
		{
			object[] paramArray = new object[2];
			paramArray[0] = type;
			paramArray[1] = axisGroup;
			object returnValue = Invoker.MethodReturn(this, "Axes", paramArray);
			COMObject returnObject = LateBindingApi.Core.Factory.CreateObjectFromComProxy(this, returnValue);
			return returnObject;
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public void SetBackgroundPicture(string filename)
		{
			object[] paramArray = new object[1];
			paramArray[0] = filename;
			Invoker.Method(this, "SetBackgroundPicture", paramArray);
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public COMObject BarGroups()
		{
			object returnValue = Invoker.MethodReturn(this, "BarGroups", null);
			COMObject returnObject = LateBindingApi.Core.Factory.CreateObjectFromComProxy(this, returnValue);
			return returnObject;
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public COMObject BarGroups(object index)
		{
			object[] paramArray = new object[1];
			paramArray[0] = index;
			object returnValue = Invoker.MethodReturn(this, "BarGroups", paramArray);
			COMObject returnObject = LateBindingApi.Core.Factory.CreateObjectFromComProxy(this, returnValue);
			return returnObject;
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public LateBindingApi.Excel.Buttons Buttons()
		{
			object returnValue = Invoker.MethodReturn(this, "Buttons", null);
			if(null == returnValue)
				return null;
			LateBindingApi.Excel.Buttons newClass = new LateBindingApi.Excel.Buttons(this, returnValue);
			return newClass;
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public LateBindingApi.Excel.Button Buttons(object index)
		{
			object[] paramArray = new object[1];
			paramArray[0] = index;
			object returnValue = Invoker.MethodReturn(this, "Buttons", paramArray);
			if(null == returnValue)
				return null;
			LateBindingApi.Excel.Button newClass = new LateBindingApi.Excel.Button(this, returnValue);
			return newClass;
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public COMObject ChartGroups()
		{
			object returnValue = Invoker.MethodReturn(this, "ChartGroups", null);
			COMObject returnObject = LateBindingApi.Core.Factory.CreateObjectFromComProxy(this, returnValue);
			return returnObject;
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public COMObject ChartGroups(object index)
		{
			object[] paramArray = new object[1];
			paramArray[0] = index;
			object returnValue = Invoker.MethodReturn(this, "ChartGroups", paramArray);
			COMObject returnObject = LateBindingApi.Core.Factory.CreateObjectFromComProxy(this, returnValue);
			return returnObject;
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public LateBindingApi.Excel.ChartObjects ChartObjects()
		{
			object returnValue = Invoker.MethodReturn(this, "ChartObjects", null);
			if(null == returnValue)
				return null;
			LateBindingApi.Excel.ChartObjects newClass = new LateBindingApi.Excel.ChartObjects(this, returnValue);
			return newClass;
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public LateBindingApi.Excel.ChartObject ChartObjects(object index)
		{
			object[] paramArray = new object[1];
			paramArray[0] = index;
			object returnValue = Invoker.MethodReturn(this, "ChartObjects", paramArray);
			if(null == returnValue)
				return null;
			LateBindingApi.Excel.ChartObject newClass = new LateBindingApi.Excel.ChartObject(this, returnValue);
			return newClass;
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public void ChartWizard()
		{
			Invoker.Method(this, "ChartWizard", null);
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public void ChartWizard(object source, object gallery, object format, object plotBy, object categoryLabels, object seriesLabels, object hasLegend, object title, object categoryTitle, object valueTitle, object extraTitle)
		{
			object[] paramArray = new object[11];
			paramArray[0] = source;
			paramArray[1] = gallery;
			paramArray[2] = format;
			paramArray[3] = plotBy;
			paramArray[4] = categoryLabels;
			paramArray[5] = seriesLabels;
			paramArray[6] = hasLegend;
			paramArray[7] = title;
			paramArray[8] = categoryTitle;
			paramArray[9] = valueTitle;
			paramArray[10] = extraTitle;
			Invoker.Method(this, "ChartWizard", paramArray);
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public LateBindingApi.Excel.CheckBoxes CheckBoxes()
		{
			object returnValue = Invoker.MethodReturn(this, "CheckBoxes", null);
			if(null == returnValue)
				return null;
			LateBindingApi.Excel.CheckBoxes newClass = new LateBindingApi.Excel.CheckBoxes(this, returnValue);
			return newClass;
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public LateBindingApi.Excel.CheckBox CheckBoxes(object index)
		{
			object[] paramArray = new object[1];
			paramArray[0] = index;
			object returnValue = Invoker.MethodReturn(this, "CheckBoxes", paramArray);
			if(null == returnValue)
				return null;
			LateBindingApi.Excel.CheckBox newClass = new LateBindingApi.Excel.CheckBox(this, returnValue);
			return newClass;
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public void CheckSpelling()
		{
			Invoker.Method(this, "CheckSpelling", null);
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public void CheckSpelling(object customDictionary, object ignoreUppercase, object alwaysSuggest, object spellLang)
		{
			object[] paramArray = new object[4];
			paramArray[0] = customDictionary;
			paramArray[1] = ignoreUppercase;
			paramArray[2] = alwaysSuggest;
			paramArray[3] = spellLang;
			Invoker.Method(this, "CheckSpelling", paramArray);
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public COMObject ColumnGroups()
		{
			object returnValue = Invoker.MethodReturn(this, "ColumnGroups", null);
			COMObject returnObject = LateBindingApi.Core.Factory.CreateObjectFromComProxy(this, returnValue);
			return returnObject;
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public COMObject ColumnGroups(object index)
		{
			object[] paramArray = new object[1];
			paramArray[0] = index;
			object returnValue = Invoker.MethodReturn(this, "ColumnGroups", paramArray);
			COMObject returnObject = LateBindingApi.Core.Factory.CreateObjectFromComProxy(this, returnValue);
			return returnObject;
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public void CopyPicture(LateBindingApi.Excel.Enums.XlPictureAppearance appearance, LateBindingApi.Excel.Enums.XlCopyPictureFormat format, LateBindingApi.Excel.Enums.XlPictureAppearance size)
		{
			object[] paramArray = new object[3];
			paramArray[0] = appearance;
			paramArray[1] = format;
			paramArray[2] = size;
			Invoker.Method(this, "CopyPicture", paramArray);
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public void CreatePublisher(object edition, LateBindingApi.Excel.Enums.XlPictureAppearance appearance, LateBindingApi.Excel.Enums.XlPictureAppearance size)
		{
			object[] paramArray = new object[3];
			paramArray[0] = edition;
			paramArray[1] = appearance;
			paramArray[2] = size;
			Invoker.Method(this, "CreatePublisher", paramArray);
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public void CreatePublisher(object edition, LateBindingApi.Excel.Enums.XlPictureAppearance appearance, LateBindingApi.Excel.Enums.XlPictureAppearance size, object containsPICT, object containsBIFF, object containsRTF, object containsVALU)
		{
			object[] paramArray = new object[7];
			paramArray[0] = edition;
			paramArray[1] = appearance;
			paramArray[2] = size;
			paramArray[3] = containsPICT;
			paramArray[4] = containsBIFF;
			paramArray[5] = containsRTF;
			paramArray[6] = containsVALU;
			Invoker.Method(this, "CreatePublisher", paramArray);
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public void Deselect()
		{
			Invoker.Method(this, "Deselect", null);
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public COMObject DoughnutGroups()
		{
			object returnValue = Invoker.MethodReturn(this, "DoughnutGroups", null);
			COMObject returnObject = LateBindingApi.Core.Factory.CreateObjectFromComProxy(this, returnValue);
			return returnObject;
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public COMObject DoughnutGroups(object index)
		{
			object[] paramArray = new object[1];
			paramArray[0] = index;
			object returnValue = Invoker.MethodReturn(this, "DoughnutGroups", paramArray);
			COMObject returnObject = LateBindingApi.Core.Factory.CreateObjectFromComProxy(this, returnValue);
			return returnObject;
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public LateBindingApi.Excel.Drawings Drawings()
		{
			object returnValue = Invoker.MethodReturn(this, "Drawings", null);
			if(null == returnValue)
				return null;
			LateBindingApi.Excel.Drawings newClass = new LateBindingApi.Excel.Drawings(this, returnValue);
			return newClass;
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public LateBindingApi.Excel.Drawing Drawings(object index)
		{
			object[] paramArray = new object[1];
			paramArray[0] = index;
			object returnValue = Invoker.MethodReturn(this, "Drawings", paramArray);
			if(null == returnValue)
				return null;
			LateBindingApi.Excel.Drawing newClass = new LateBindingApi.Excel.Drawing(this, returnValue);
			return newClass;
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public COMObject DrawingObjects()
		{
			object returnValue = Invoker.MethodReturn(this, "DrawingObjects", null);
			COMObject returnObject = LateBindingApi.Core.Factory.CreateObjectFromComProxy(this, returnValue);
			return returnObject;
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public COMObject DrawingObjects(object index)
		{
			object[] paramArray = new object[1];
			paramArray[0] = index;
			object returnValue = Invoker.MethodReturn(this, "DrawingObjects", paramArray);
			COMObject returnObject = LateBindingApi.Core.Factory.CreateObjectFromComProxy(this, returnValue);
			return returnObject;
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public LateBindingApi.Excel.DropDowns DropDowns()
		{
			object returnValue = Invoker.MethodReturn(this, "DropDowns", null);
			if(null == returnValue)
				return null;
			LateBindingApi.Excel.DropDowns newClass = new LateBindingApi.Excel.DropDowns(this, returnValue);
			return newClass;
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public LateBindingApi.Excel.DropDown DropDowns(object index)
		{
			object[] paramArray = new object[1];
			paramArray[0] = index;
			object returnValue = Invoker.MethodReturn(this, "DropDowns", paramArray);
			if(null == returnValue)
				return null;
			LateBindingApi.Excel.DropDown newClass = new LateBindingApi.Excel.DropDown(this, returnValue);
			return newClass;
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public COMVariant Evaluate(object name)
		{
			object[] paramArray = new object[1];
			paramArray[0] = name;
			object returnValue = Invoker.MethodReturn(this, "Evaluate", paramArray);
			COMVariant returnObject = LateBindingApi.Core.Factory.CreateVariantFromComProxy(this, returnValue);
			return returnObject;
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public COMVariant _Evaluate(object name)
		{
			object[] paramArray = new object[1];
			paramArray[0] = name;
			object returnValue = Invoker.MethodReturn(this, "_Evaluate", paramArray);
			COMVariant returnObject = LateBindingApi.Core.Factory.CreateVariantFromComProxy(this, returnValue);
			return returnObject;
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public LateBindingApi.Excel.GroupBoxes GroupBoxes()
		{
			object returnValue = Invoker.MethodReturn(this, "GroupBoxes", null);
			if(null == returnValue)
				return null;
			LateBindingApi.Excel.GroupBoxes newClass = new LateBindingApi.Excel.GroupBoxes(this, returnValue);
			return newClass;
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public LateBindingApi.Excel.GroupBox GroupBoxes(object index)
		{
			object[] paramArray = new object[1];
			paramArray[0] = index;
			object returnValue = Invoker.MethodReturn(this, "GroupBoxes", paramArray);
			if(null == returnValue)
				return null;
			LateBindingApi.Excel.GroupBox newClass = new LateBindingApi.Excel.GroupBox(this, returnValue);
			return newClass;
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public LateBindingApi.Excel.GroupObjects GroupObjects()
		{
			object returnValue = Invoker.MethodReturn(this, "GroupObjects", null);
			if(null == returnValue)
				return null;
			LateBindingApi.Excel.GroupObjects newClass = new LateBindingApi.Excel.GroupObjects(this, returnValue);
			return newClass;
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public LateBindingApi.Excel.GroupObject GroupObjects(object index)
		{
			object[] paramArray = new object[1];
			paramArray[0] = index;
			object returnValue = Invoker.MethodReturn(this, "GroupObjects", paramArray);
			if(null == returnValue)
				return null;
			LateBindingApi.Excel.GroupObject newClass = new LateBindingApi.Excel.GroupObject(this, returnValue);
			return newClass;
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public LateBindingApi.Excel.Labels Labels()
		{
			object returnValue = Invoker.MethodReturn(this, "Labels", null);
			if(null == returnValue)
				return null;
			LateBindingApi.Excel.Labels newClass = new LateBindingApi.Excel.Labels(this, returnValue);
			return newClass;
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public LateBindingApi.Excel.Label Labels(object index)
		{
			object[] paramArray = new object[1];
			paramArray[0] = index;
			object returnValue = Invoker.MethodReturn(this, "Labels", paramArray);
			if(null == returnValue)
				return null;
			LateBindingApi.Excel.Label newClass = new LateBindingApi.Excel.Label(this, returnValue);
			return newClass;
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public COMObject LineGroups()
		{
			object returnValue = Invoker.MethodReturn(this, "LineGroups", null);
			COMObject returnObject = LateBindingApi.Core.Factory.CreateObjectFromComProxy(this, returnValue);
			return returnObject;
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public COMObject LineGroups(object index)
		{
			object[] paramArray = new object[1];
			paramArray[0] = index;
			object returnValue = Invoker.MethodReturn(this, "LineGroups", paramArray);
			COMObject returnObject = LateBindingApi.Core.Factory.CreateObjectFromComProxy(this, returnValue);
			return returnObject;
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public LateBindingApi.Excel.Lines Lines()
		{
			object returnValue = Invoker.MethodReturn(this, "Lines", null);
			if(null == returnValue)
				return null;
			LateBindingApi.Excel.Lines newClass = new LateBindingApi.Excel.Lines(this, returnValue);
			return newClass;
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public LateBindingApi.Excel.Line Lines(object index)
		{
			object[] paramArray = new object[1];
			paramArray[0] = index;
			object returnValue = Invoker.MethodReturn(this, "Lines", paramArray);
			if(null == returnValue)
				return null;
			LateBindingApi.Excel.Line newClass = new LateBindingApi.Excel.Line(this, returnValue);
			return newClass;
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public LateBindingApi.Excel.ListBoxes ListBoxes()
		{
			object returnValue = Invoker.MethodReturn(this, "ListBoxes", null);
			if(null == returnValue)
				return null;
			LateBindingApi.Excel.ListBoxes newClass = new LateBindingApi.Excel.ListBoxes(this, returnValue);
			return newClass;
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public LateBindingApi.Excel.ListBox ListBoxes(object index)
		{
			object[] paramArray = new object[1];
			paramArray[0] = index;
			object returnValue = Invoker.MethodReturn(this, "ListBoxes", paramArray);
			if(null == returnValue)
				return null;
			LateBindingApi.Excel.ListBox newClass = new LateBindingApi.Excel.ListBox(this, returnValue);
			return newClass;
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public LateBindingApi.Excel.Chart Location(LateBindingApi.Excel.Enums.XlChartLocation where)
		{
			object[] paramArray = new object[1];
			paramArray[0] = where;
			object returnValue = Invoker.MethodReturn(this, "Location", paramArray);
			if(null == returnValue)
				return null;
			LateBindingApi.Excel.Chart newClass = new LateBindingApi.Excel.Chart(this, returnValue);
			return newClass;
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public LateBindingApi.Excel.Chart Location(LateBindingApi.Excel.Enums.XlChartLocation where, object name)
		{
			object[] paramArray = new object[2];
			paramArray[0] = where;
			paramArray[1] = name;
			object returnValue = Invoker.MethodReturn(this, "Location", paramArray);
			if(null == returnValue)
				return null;
			LateBindingApi.Excel.Chart newClass = new LateBindingApi.Excel.Chart(this, returnValue);
			return newClass;
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public LateBindingApi.Excel.OLEObjects OLEObjects()
		{
			object returnValue = Invoker.MethodReturn(this, "OLEObjects", null);
			if(null == returnValue)
				return null;
			LateBindingApi.Excel.OLEObjects newClass = new LateBindingApi.Excel.OLEObjects(this, returnValue);
			return newClass;
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public LateBindingApi.Excel.OLEObject OLEObjects(object index)
		{
			object[] paramArray = new object[1];
			paramArray[0] = index;
			object returnValue = Invoker.MethodReturn(this, "OLEObjects", paramArray);
			if(null == returnValue)
				return null;
			LateBindingApi.Excel.OLEObject newClass = new LateBindingApi.Excel.OLEObject(this, returnValue);
			return newClass;
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public LateBindingApi.Excel.OptionButtons OptionButtons()
		{
			object returnValue = Invoker.MethodReturn(this, "OptionButtons", null);
			if(null == returnValue)
				return null;
			LateBindingApi.Excel.OptionButtons newClass = new LateBindingApi.Excel.OptionButtons(this, returnValue);
			return newClass;
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public LateBindingApi.Excel.OptionButton OptionButtons(object index)
		{
			object[] paramArray = new object[1];
			paramArray[0] = index;
			object returnValue = Invoker.MethodReturn(this, "OptionButtons", paramArray);
			if(null == returnValue)
				return null;
			LateBindingApi.Excel.OptionButton newClass = new LateBindingApi.Excel.OptionButton(this, returnValue);
			return newClass;
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public LateBindingApi.Excel.Ovals Ovals()
		{
			object returnValue = Invoker.MethodReturn(this, "Ovals", null);
			if(null == returnValue)
				return null;
			LateBindingApi.Excel.Ovals newClass = new LateBindingApi.Excel.Ovals(this, returnValue);
			return newClass;
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public LateBindingApi.Excel.Oval Ovals(object index)
		{
			object[] paramArray = new object[1];
			paramArray[0] = index;
			object returnValue = Invoker.MethodReturn(this, "Ovals", paramArray);
			if(null == returnValue)
				return null;
			LateBindingApi.Excel.Oval newClass = new LateBindingApi.Excel.Oval(this, returnValue);
			return newClass;
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public void Paste()
		{
			Invoker.Method(this, "Paste", null);
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public void Paste(object type)
		{
			object[] paramArray = new object[1];
			paramArray[0] = type;
			Invoker.Method(this, "Paste", paramArray);
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public LateBindingApi.Excel.Pictures Pictures()
		{
			object returnValue = Invoker.MethodReturn(this, "Pictures", null);
			if(null == returnValue)
				return null;
			LateBindingApi.Excel.Pictures newClass = new LateBindingApi.Excel.Pictures(this, returnValue);
			return newClass;
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public LateBindingApi.Excel.Picture Pictures(object index)
		{
			object[] paramArray = new object[1];
			paramArray[0] = index;
			object returnValue = Invoker.MethodReturn(this, "Pictures", paramArray);
			if(null == returnValue)
				return null;
			LateBindingApi.Excel.Picture newClass = new LateBindingApi.Excel.Picture(this, returnValue);
			return newClass;
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public COMObject PieGroups()
		{
			object returnValue = Invoker.MethodReturn(this, "PieGroups", null);
			COMObject returnObject = LateBindingApi.Core.Factory.CreateObjectFromComProxy(this, returnValue);
			return returnObject;
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public COMObject PieGroups(object index)
		{
			object[] paramArray = new object[1];
			paramArray[0] = index;
			object returnValue = Invoker.MethodReturn(this, "PieGroups", paramArray);
			COMObject returnObject = LateBindingApi.Core.Factory.CreateObjectFromComProxy(this, returnValue);
			return returnObject;
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public COMObject RadarGroups()
		{
			object returnValue = Invoker.MethodReturn(this, "RadarGroups", null);
			COMObject returnObject = LateBindingApi.Core.Factory.CreateObjectFromComProxy(this, returnValue);
			return returnObject;
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public COMObject RadarGroups(object index)
		{
			object[] paramArray = new object[1];
			paramArray[0] = index;
			object returnValue = Invoker.MethodReturn(this, "RadarGroups", paramArray);
			COMObject returnObject = LateBindingApi.Core.Factory.CreateObjectFromComProxy(this, returnValue);
			return returnObject;
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public LateBindingApi.Excel.Rectangles Rectangles()
		{
			object returnValue = Invoker.MethodReturn(this, "Rectangles", null);
			if(null == returnValue)
				return null;
			LateBindingApi.Excel.Rectangles newClass = new LateBindingApi.Excel.Rectangles(this, returnValue);
			return newClass;
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public LateBindingApi.Excel.Rectangle Rectangles(object index)
		{
			object[] paramArray = new object[1];
			paramArray[0] = index;
			object returnValue = Invoker.MethodReturn(this, "Rectangles", paramArray);
			if(null == returnValue)
				return null;
			LateBindingApi.Excel.Rectangle newClass = new LateBindingApi.Excel.Rectangle(this, returnValue);
			return newClass;
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public LateBindingApi.Excel.ScrollBars ScrollBars()
		{
			object returnValue = Invoker.MethodReturn(this, "ScrollBars", null);
			if(null == returnValue)
				return null;
			LateBindingApi.Excel.ScrollBars newClass = new LateBindingApi.Excel.ScrollBars(this, returnValue);
			return newClass;
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public LateBindingApi.Excel.ScrollBar ScrollBars(object index)
		{
			object[] paramArray = new object[1];
			paramArray[0] = index;
			object returnValue = Invoker.MethodReturn(this, "ScrollBars", paramArray);
			if(null == returnValue)
				return null;
			LateBindingApi.Excel.ScrollBar newClass = new LateBindingApi.Excel.ScrollBar(this, returnValue);
			return newClass;
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public LateBindingApi.Excel.SeriesCollection SeriesCollection()
		{
			object returnValue = Invoker.MethodReturn(this, "SeriesCollection", null);
			if(null == returnValue)
				return null;
			LateBindingApi.Excel.SeriesCollection newClass = new LateBindingApi.Excel.SeriesCollection(this, returnValue);
			return newClass;
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public LateBindingApi.Excel.Series SeriesCollection(object index)
		{
			object[] paramArray = new object[1];
			paramArray[0] = index;
			object returnValue = Invoker.MethodReturn(this, "SeriesCollection", paramArray);
			if(null == returnValue)
				return null;
			LateBindingApi.Excel.Series newClass = new LateBindingApi.Excel.Series(this, returnValue);
			return newClass;
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public LateBindingApi.Excel.Spinners Spinners()
		{
			object returnValue = Invoker.MethodReturn(this, "Spinners", null);
			if(null == returnValue)
				return null;
			LateBindingApi.Excel.Spinners newClass = new LateBindingApi.Excel.Spinners(this, returnValue);
			return newClass;
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public LateBindingApi.Excel.Spinner Spinners(object index)
		{
			object[] paramArray = new object[1];
			paramArray[0] = index;
			object returnValue = Invoker.MethodReturn(this, "Spinners", paramArray);
			if(null == returnValue)
				return null;
			LateBindingApi.Excel.Spinner newClass = new LateBindingApi.Excel.Spinner(this, returnValue);
			return newClass;
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public LateBindingApi.Excel.TextBoxes TextBoxes()
		{
			object returnValue = Invoker.MethodReturn(this, "TextBoxes", null);
			if(null == returnValue)
				return null;
			LateBindingApi.Excel.TextBoxes newClass = new LateBindingApi.Excel.TextBoxes(this, returnValue);
			return newClass;
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public LateBindingApi.Excel.TextBox TextBoxes(object index)
		{
			object[] paramArray = new object[1];
			paramArray[0] = index;
			object returnValue = Invoker.MethodReturn(this, "TextBoxes", paramArray);
			if(null == returnValue)
				return null;
			LateBindingApi.Excel.TextBox newClass = new LateBindingApi.Excel.TextBox(this, returnValue);
			return newClass;
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public void ApplyCustomType(LateBindingApi.Excel.Enums.XlChartType chartType)
		{
			object[] paramArray = new object[1];
			paramArray[0] = chartType;
			Invoker.Method(this, "ApplyCustomType", paramArray);
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public void ApplyCustomType(LateBindingApi.Excel.Enums.XlChartType chartType, object typeName)
		{
			object[] paramArray = new object[2];
			paramArray[0] = chartType;
			paramArray[1] = typeName;
			Invoker.Method(this, "ApplyCustomType", paramArray);
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public COMObject XYGroups()
		{
			object returnValue = Invoker.MethodReturn(this, "XYGroups", null);
			COMObject returnObject = LateBindingApi.Core.Factory.CreateObjectFromComProxy(this, returnValue);
			return returnObject;
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public COMObject XYGroups(object index)
		{
			object[] paramArray = new object[1];
			paramArray[0] = index;
			object returnValue = Invoker.MethodReturn(this, "XYGroups", paramArray);
			COMObject returnObject = LateBindingApi.Core.Factory.CreateObjectFromComProxy(this, returnValue);
			return returnObject;
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public void CopyChartBuild()
		{
			Invoker.Method(this, "CopyChartBuild", null);
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public void GetChartElement(Int32 x, Int32 y, Int32 elementID, Int32 arg1, Int32 arg2)
		{
			object[] paramArray = new object[5];
			paramArray[0] = x;
			paramArray[1] = y;
			paramArray.SetValue(elementID,2);
			paramArray.SetValue(arg1,3);
			paramArray.SetValue(arg2,4);
			Invoker.Method(this, "GetChartElement", paramArray);
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public void SetSourceData(LateBindingApi.Excel.Range source)
		{
			object[] paramArray = new object[1];
			paramArray.SetValue(source,0);
			Invoker.Method(this, "SetSourceData", paramArray);
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public void SetSourceData(LateBindingApi.Excel.Range source, object plotBy)
		{
			object[] paramArray = new object[2];
			paramArray.SetValue(source,0);
			paramArray[1] = plotBy;
			Invoker.Method(this, "SetSourceData", paramArray);
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public bool Export(string filename)
		{
			object[] paramArray = new object[1];
			paramArray[0] = filename;
			object returnValue = Invoker.MethodReturn(this, "Export", paramArray);
			return (bool)returnValue;
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public bool Export(string filename, object filterName, object interactive)
		{
			object[] paramArray = new object[3];
			paramArray[0] = filename;
			paramArray[1] = filterName;
			paramArray[2] = interactive;
			object returnValue = Invoker.MethodReturn(this, "Export", paramArray);
			return (bool)returnValue;
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public void Refresh()
		{
			Invoker.Method(this, "Refresh", null);
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public void PrintOut()
		{
			Invoker.Method(this, "PrintOut", null);
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public void PrintOut(object from, object to, object copies, object preview, object activePrinter, object printToFile, object collate, object prToFileName)
		{
			object[] paramArray = new object[8];
			paramArray[0] = from;
			paramArray[1] = to;
			paramArray[2] = copies;
			paramArray[3] = preview;
			paramArray[4] = activePrinter;
			paramArray[5] = printToFile;
			paramArray[6] = collate;
			paramArray[7] = prToFileName;
			Invoker.Method(this, "PrintOut", paramArray);
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14")]
		public void _Protect()
		{
			Invoker.Method(this, "_Protect", null);
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14")]
		public void _Protect(object password, object drawingObjects, object contents, object scenarios, object userInterfaceOnly)
		{
			object[] paramArray = new object[5];
			paramArray[0] = password;
			paramArray[1] = drawingObjects;
			paramArray[2] = contents;
			paramArray[3] = scenarios;
			paramArray[4] = userInterfaceOnly;
			Invoker.Method(this, "_Protect", paramArray);
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14")]
		public void _SaveAs(string filename)
		{
			object[] paramArray = new object[1];
			paramArray[0] = filename;
			Invoker.Method(this, "_SaveAs", paramArray);
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14")]
		public void _SaveAs(string filename, object fileFormat, object password, object writeResPassword, object readOnlyRecommended, object createBackup, object addToMru, object textCodepage, object textVisualLayout)
		{
			object[] paramArray = new object[9];
			paramArray[0] = filename;
			paramArray[1] = fileFormat;
			paramArray[2] = password;
			paramArray[3] = writeResPassword;
			paramArray[4] = readOnlyRecommended;
			paramArray[5] = createBackup;
			paramArray[6] = addToMru;
			paramArray[7] = textCodepage;
			paramArray[8] = textVisualLayout;
			Invoker.Method(this, "_SaveAs", paramArray);
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14")]
		public void _ApplyDataLabels(LateBindingApi.Excel.Enums.XlDataLabelsType type)
		{
			object[] paramArray = new object[1];
			paramArray[0] = type;
			Invoker.Method(this, "_ApplyDataLabels", paramArray);
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14")]
		public void _ApplyDataLabels(LateBindingApi.Excel.Enums.XlDataLabelsType type, object legendKey, object autoText, object hasLeaderLines)
		{
			object[] paramArray = new object[4];
			paramArray[0] = type;
			paramArray[1] = legendKey;
			paramArray[2] = autoText;
			paramArray[3] = hasLeaderLines;
			Invoker.Method(this, "_ApplyDataLabels", paramArray);
		}

		[SupportByLibrary("XL12","XL14")]
		public void __PrintOut()
		{
			Invoker.Method(this, "__PrintOut", null);
		}

		[SupportByLibrary("XL12","XL14")]
		public void __PrintOut(object from, object to, object copies, object preview, object activePrinter, object printToFile, object collate)
		{
			object[] paramArray = new object[7];
			paramArray[0] = from;
			paramArray[1] = to;
			paramArray[2] = copies;
			paramArray[3] = preview;
			paramArray[4] = activePrinter;
			paramArray[5] = printToFile;
			paramArray[6] = collate;
			Invoker.Method(this, "__PrintOut", paramArray);
		}

		[SupportByLibrary("XL12","XL14")]
		public void ApplyLayout(Int32 layout)
		{
			object[] paramArray = new object[1];
			paramArray[0] = layout;
			Invoker.Method(this, "ApplyLayout", paramArray);
		}

		[SupportByLibrary("XL12","XL14")]
		public void ApplyLayout(Int32 layout, object chartType)
		{
			object[] paramArray = new object[2];
			paramArray[0] = layout;
			paramArray[1] = chartType;
			Invoker.Method(this, "ApplyLayout", paramArray);
		}

		[SupportByLibrary("XL12","XL14")]
		public void SetElement(LateBindingApi.Office.Enums.MsoChartElementType element)
		{
			object[] paramArray = new object[1];
			paramArray[0] = element;
			Invoker.Method(this, "SetElement", paramArray);
		}

		[SupportByLibrary("XL12","XL14")]
		public void ApplyChartTemplate(string filename)
		{
			object[] paramArray = new object[1];
			paramArray[0] = filename;
			Invoker.Method(this, "ApplyChartTemplate", paramArray);
		}

		[SupportByLibrary("XL12","XL14")]
		public void SaveChartTemplate(string filename)
		{
			object[] paramArray = new object[1];
			paramArray[0] = filename;
			Invoker.Method(this, "SaveChartTemplate", paramArray);
		}

		[SupportByLibrary("XL12","XL14")]
		public void SetDefaultChart(object name)
		{
			object[] paramArray = new object[1];
			paramArray[0] = name;
			Invoker.Method(this, "SetDefaultChart", paramArray);
		}

		[SupportByLibrary("XL12","XL14")]
		public void ExportAsFixedFormat(LateBindingApi.Excel.Enums.XlFixedFormatType type)
		{
			object[] paramArray = new object[1];
			paramArray[0] = type;
			Invoker.Method(this, "ExportAsFixedFormat", paramArray);
		}

		[SupportByLibrary("XL12","XL14")]
		public void ExportAsFixedFormat(LateBindingApi.Excel.Enums.XlFixedFormatType type, object filename, object quality, object includeDocProperties, object ignorePrintAreas, object from, object to, object openAfterPublish, object fixedFormatExtClassPtr)
		{
			object[] paramArray = new object[9];
			paramArray[0] = type;
			paramArray[1] = filename;
			paramArray[2] = quality;
			paramArray[3] = includeDocProperties;
			paramArray[4] = ignorePrintAreas;
			paramArray[5] = from;
			paramArray[6] = to;
			paramArray[7] = openAfterPublish;
			paramArray[8] = fixedFormatExtClassPtr;
			Invoker.Method(this, "ExportAsFixedFormat", paramArray);
		}

		[SupportByLibrary("XL12","XL14")]
		public void ClearToMatchStyle()
		{
			Invoker.Method(this, "ClearToMatchStyle", null);
		}

		#endregion

	}
}
