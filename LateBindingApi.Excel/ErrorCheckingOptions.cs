//Generated by LateBindingApi.CodeGenerator
using System;
using System.Reflection;
using System.ComponentModel;
using System.Runtime.InteropServices;
using LateBindingApi.Core;
namespace LateBindingApi.Excel
{
	[SupportByLibrary("XL10","XL11","XL12","XL14")]
	public class ErrorCheckingOptions : COMObject
	{
		#region Construction

		public ErrorCheckingOptions(COMObject parentObject, object comProxy) : base(parentObject, comProxy)
		{
		}

		public ErrorCheckingOptions(COMObject parentObject, object comProxy, Type comProxyType) : base(parentObject, comProxy, comProxyType)
		{
		}

		public ErrorCheckingOptions(COMObject replacedObject) : base(replacedObject)
		{
		}

		public ErrorCheckingOptions()
		{
		}

		#endregion

		#region Properties

		[SupportByLibrary("XL10","XL11","XL12","XL14")]
		public LateBindingApi.Excel.Application Application
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "Application");
				if(null == returnValue)
					return null;
				LateBindingApi.Excel.Application newClass = new LateBindingApi.Excel.Application(this, returnValue);
				return newClass;
			}
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14")]
		public LateBindingApi.Excel.Enums.XlCreator Creator
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "Creator");
				return (LateBindingApi.Excel.Enums.XlCreator)returnValue;
			}
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14")]
		public COMObject Parent
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "Parent");
				COMObject returnObject = LateBindingApi.Core.Factory.CreateObjectFromComProxy(this, returnValue);
				return returnObject;
			}
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14")]
		public bool BackgroundChecking
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "BackgroundChecking");
				return (bool)returnValue;
			}
			set
			{
				Invoker.PropertySet(this, "BackgroundChecking", value);
			}						
		}


		[SupportByLibrary("XL10","XL11","XL12","XL14")]
		public LateBindingApi.Excel.Enums.XlColorIndex IndicatorColorIndex
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "IndicatorColorIndex");
				return (LateBindingApi.Excel.Enums.XlColorIndex)returnValue;
			}
			set
			{
				Invoker.PropertySet(this, "IndicatorColorIndex", value);
			}						
		}


		[SupportByLibrary("XL10","XL11","XL12","XL14")]
		public bool EvaluateToError
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "EvaluateToError");
				return (bool)returnValue;
			}
			set
			{
				Invoker.PropertySet(this, "EvaluateToError", value);
			}						
		}


		[SupportByLibrary("XL10","XL11","XL12","XL14")]
		public bool TextDate
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "TextDate");
				return (bool)returnValue;
			}
			set
			{
				Invoker.PropertySet(this, "TextDate", value);
			}						
		}


		[SupportByLibrary("XL10","XL11","XL12","XL14")]
		public bool NumberAsText
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "NumberAsText");
				return (bool)returnValue;
			}
			set
			{
				Invoker.PropertySet(this, "NumberAsText", value);
			}						
		}


		[SupportByLibrary("XL10","XL11","XL12","XL14")]
		public bool InconsistentFormula
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "InconsistentFormula");
				return (bool)returnValue;
			}
			set
			{
				Invoker.PropertySet(this, "InconsistentFormula", value);
			}						
		}


		[SupportByLibrary("XL10","XL11","XL12","XL14")]
		public bool OmittedCells
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "OmittedCells");
				return (bool)returnValue;
			}
			set
			{
				Invoker.PropertySet(this, "OmittedCells", value);
			}						
		}


		[SupportByLibrary("XL10","XL11","XL12","XL14")]
		public bool UnlockedFormulaCells
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "UnlockedFormulaCells");
				return (bool)returnValue;
			}
			set
			{
				Invoker.PropertySet(this, "UnlockedFormulaCells", value);
			}						
		}


		[SupportByLibrary("XL10","XL11","XL12","XL14")]
		public bool EmptyCellReferences
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "EmptyCellReferences");
				return (bool)returnValue;
			}
			set
			{
				Invoker.PropertySet(this, "EmptyCellReferences", value);
			}						
		}


		[SupportByLibrary("XL11","XL12","XL14")]
		public bool ListDataValidation
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "ListDataValidation");
				return (bool)returnValue;
			}
			set
			{
				Invoker.PropertySet(this, "ListDataValidation", value);
			}						
		}


		[SupportByLibrary("XL12","XL14")]
		public bool InconsistentTableFormula
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "InconsistentTableFormula");
				return (bool)returnValue;
			}
			set
			{
				Invoker.PropertySet(this, "InconsistentTableFormula", value);
			}						
		}


		#endregion

		#region Methods

		#endregion

	}
}
