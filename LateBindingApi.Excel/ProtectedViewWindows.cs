//Generated by LateBindingApi.CodeGenerator
using System;
using System.Reflection;
using System.ComponentModel;
using System.Runtime.InteropServices;
using LateBindingApi.Core;
using System.Collections;
namespace LateBindingApi.Excel
{
	[SupportByLibrary("XL14")]
	public class ProtectedViewWindows : COMObject
	{
		#region Construction

		public ProtectedViewWindows(COMObject parentObject, object comProxy) : base(parentObject, comProxy)
		{
		}

		public ProtectedViewWindows(COMObject parentObject, object comProxy, Type comProxyType) : base(parentObject, comProxy, comProxyType)
		{
		}

		public ProtectedViewWindows(COMObject replacedObject) : base(replacedObject)
		{
		}

		public ProtectedViewWindows()
		{
		}

		#endregion

		#region Properties

		[SupportByLibrary("XL14")]
		public LateBindingApi.Excel.Application Application
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "Application");
				if(null == returnValue)
					return null;
				LateBindingApi.Excel.Application newClass = new LateBindingApi.Excel.Application(this, returnValue);
				return newClass;
			}
		}

		[SupportByLibrary("XL14")]
		public LateBindingApi.Excel.Enums.XlCreator Creator
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "Creator");
				return (LateBindingApi.Excel.Enums.XlCreator)returnValue;
			}
		}

		[SupportByLibrary("XL14")]
		public COMObject Parent
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "Parent");
				COMObject returnObject = LateBindingApi.Core.Factory.CreateObjectFromComProxy(this, returnValue);
				return returnObject;
			}
		}

		[SupportByLibrary("XL14")]
		public Int32 Count
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "Count");
				return (Int32)returnValue;
			}
		}

		[SupportByLibrary("XL14")]
		public LateBindingApi.Excel.ProtectedViewWindow this[object index]
		{
			get
			{
				object[] paramArray = new object[1];
				paramArray[0] = index;		
				object returnValue = Invoker.PropertyGet(this, "Item", paramArray);
				if(null == returnValue)
					return null;
				LateBindingApi.Excel.ProtectedViewWindow newClass = new LateBindingApi.Excel.ProtectedViewWindow(this, returnValue);
				return newClass;
			}
		}

		[SupportByLibrary("XL14")]
		public IEnumerator GetEnumerator()
		{
			object enumProxy = Invoker.PropertyGet(this, "_NewEnum");
			COMObject enumerator = new COMObject(this, enumProxy);
			Invoker.Method(enumerator, "Reset", null);
			bool isMoveNextTrue = (bool)Invoker.MethodReturn(enumerator, "MoveNext", null);
            while (true == isMoveNextTrue)
            {
                object itemProxy = Invoker.PropertyGet(enumerator, "Current", null);
				LateBindingApi.Excel.ProtectedViewWindow returnClass = new LateBindingApi.Excel.ProtectedViewWindow (this, itemProxy);
				isMoveNextTrue = (bool)Invoker.MethodReturn(enumerator, "MoveNext", null);
				yield return returnClass;
            }
		}

		[SupportByLibrary("XL14")]
		public LateBindingApi.Excel.ProtectedViewWindow get__Default(object index)
		{
			object[] paramArray = new object[1];
			paramArray[0] = index;
			object returnValue = Invoker.PropertyGet(this, "_Default", paramArray);
			if(null == returnValue)
				return null;
			LateBindingApi.Excel.ProtectedViewWindow newClass = new LateBindingApi.Excel.ProtectedViewWindow(this, returnValue);
			return newClass;
		}

		#endregion

		#region Methods

		[SupportByLibrary("XL14")]
		public LateBindingApi.Excel.ProtectedViewWindow Open(string filename)
		{
			object[] paramArray = new object[1];
			paramArray[0] = filename;
			object returnValue = Invoker.MethodReturn(this, "Open", paramArray);
			if(null == returnValue)
				return null;
			LateBindingApi.Excel.ProtectedViewWindow newClass = new LateBindingApi.Excel.ProtectedViewWindow(this, returnValue);
			return newClass;
		}

		[SupportByLibrary("XL14")]
		public LateBindingApi.Excel.ProtectedViewWindow Open(string filename, object password, object addToMru, object repairMode)
		{
			object[] paramArray = new object[4];
			paramArray[0] = filename;
			paramArray[1] = password;
			paramArray[2] = addToMru;
			paramArray[3] = repairMode;
			object returnValue = Invoker.MethodReturn(this, "Open", paramArray);
			if(null == returnValue)
				return null;
			LateBindingApi.Excel.ProtectedViewWindow newClass = new LateBindingApi.Excel.ProtectedViewWindow(this, returnValue);
			return newClass;
		}

		#endregion

	}
}
