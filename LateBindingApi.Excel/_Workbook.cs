//Generated by LateBindingApi.CodeGenerator
using System;
using System.Reflection;
using System.ComponentModel;
using System.Runtime.InteropServices;
using LateBindingApi.Core;
namespace LateBindingApi.Excel
{
	[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
	public class _Workbook : COMObject
	{
		#region Construction

		public _Workbook(COMObject parentObject, object comProxy) : base(parentObject, comProxy)
		{
		}

		public _Workbook(COMObject parentObject, object comProxy, Type comProxyType) : base(parentObject, comProxy, comProxyType)
		{
		}

		public _Workbook(COMObject replacedObject) : base(replacedObject)
		{
		}

		public _Workbook()
		{
		}

		#endregion

		#region Properties

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public LateBindingApi.Excel.Application Application
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "Application");
				if(null == returnValue)
					return null;
				LateBindingApi.Excel.Application newClass = new LateBindingApi.Excel.Application(this, returnValue);
				return newClass;
			}
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public LateBindingApi.Excel.Enums.XlCreator Creator
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "Creator");
				return (LateBindingApi.Excel.Enums.XlCreator)returnValue;
			}
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public COMObject Parent
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "Parent");
				COMObject returnObject = LateBindingApi.Core.Factory.CreateObjectFromComProxy(this, returnValue);
				return returnObject;
			}
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public bool AcceptLabelsInFormulas
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "AcceptLabelsInFormulas");
				return (bool)returnValue;
			}
			set
			{
				Invoker.PropertySet(this, "AcceptLabelsInFormulas", value);
			}						
		}


		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public LateBindingApi.Excel.Chart ActiveChart
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "ActiveChart");
				if(null == returnValue)
					return null;
				LateBindingApi.Excel.Chart newClass = new LateBindingApi.Excel.Chart(this, returnValue);
				return newClass;
			}
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public COMObject ActiveSheet
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "ActiveSheet");
				COMObject returnObject = LateBindingApi.Core.Factory.CreateObjectFromComProxy(this, returnValue);
				return returnObject;
			}
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public string Author
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "Author");
				return (string)returnValue;
			}
			set
			{
				Invoker.PropertySet(this, "Author", value);
			}						
		}


		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public Int32 AutoUpdateFrequency
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "AutoUpdateFrequency");
				return (Int32)returnValue;
			}
			set
			{
				Invoker.PropertySet(this, "AutoUpdateFrequency", value);
			}						
		}


		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public bool AutoUpdateSaveChanges
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "AutoUpdateSaveChanges");
				return (bool)returnValue;
			}
			set
			{
				Invoker.PropertySet(this, "AutoUpdateSaveChanges", value);
			}						
		}


		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public Int32 ChangeHistoryDuration
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "ChangeHistoryDuration");
				return (Int32)returnValue;
			}
			set
			{
				Invoker.PropertySet(this, "ChangeHistoryDuration", value);
			}						
		}


		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public COMObject BuiltinDocumentProperties
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "BuiltinDocumentProperties");
				COMObject returnObject = LateBindingApi.Core.Factory.CreateObjectFromComProxy(this, returnValue);
				return returnObject;
			}
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public LateBindingApi.Excel.Sheets Charts
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "Charts");
				if(null == returnValue)
					return null;
				LateBindingApi.Excel.Sheets newClass = new LateBindingApi.Excel.Sheets(this, returnValue);
				return newClass;
			}
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public string CodeName
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "CodeName");
				return (string)returnValue;
			}
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public string _CodeName
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "_CodeName");
				return (string)returnValue;
			}
			set
			{
				Invoker.PropertySet(this, "_CodeName", value);
			}						
		}


		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public COMVariant Colors
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "Colors", null);
				COMVariant returnObject = LateBindingApi.Core.Factory.CreateVariantFromComProxy(this, returnValue);
				return returnObject;
			}
			set
			{
				Invoker.PropertySet(this, "Colors", value);
			}						
		}


		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public COMVariant get_Colors(object index)
		{
			object[] paramArray = new object[1];
			paramArray[0] = index;
				object returnValue = Invoker.PropertyGet(this, "Colors", paramArray);
				COMVariant returnObject = LateBindingApi.Core.Factory.CreateVariantFromComProxy(this, returnValue);
				return returnObject;
		}
		
		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public void set_Colors(object index, object value)
		{
			object[] paramArray = new object[1];
			paramArray[0] = index;
			Invoker.PropertySet(this, "Colors", paramArray, value);
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public LateBindingApi.Office.CommandBars CommandBars
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "CommandBars");
				if(null == returnValue)
					return null;
				LateBindingApi.Office.CommandBars newClass = new LateBindingApi.Office.CommandBars(this, returnValue);
				return newClass;
			}
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public string Comments
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "Comments");
				return (string)returnValue;
			}
			set
			{
				Invoker.PropertySet(this, "Comments", value);
			}						
		}


		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public LateBindingApi.Excel.Enums.XlSaveConflictResolution ConflictResolution
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "ConflictResolution");
				return (LateBindingApi.Excel.Enums.XlSaveConflictResolution)returnValue;
			}
			set
			{
				Invoker.PropertySet(this, "ConflictResolution", value);
			}						
		}


		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public COMObject Container
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "Container");
				COMObject returnObject = LateBindingApi.Core.Factory.CreateObjectFromComProxy(this, returnValue);
				return returnObject;
			}
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public bool CreateBackup
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "CreateBackup");
				return (bool)returnValue;
			}
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public COMObject CustomDocumentProperties
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "CustomDocumentProperties");
				COMObject returnObject = LateBindingApi.Core.Factory.CreateObjectFromComProxy(this, returnValue);
				return returnObject;
			}
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public bool Date1904
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "Date1904");
				return (bool)returnValue;
			}
			set
			{
				Invoker.PropertySet(this, "Date1904", value);
			}						
		}


		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public LateBindingApi.Excel.Sheets DialogSheets
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "DialogSheets");
				if(null == returnValue)
					return null;
				LateBindingApi.Excel.Sheets newClass = new LateBindingApi.Excel.Sheets(this, returnValue);
				return newClass;
			}
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public LateBindingApi.Excel.Enums.XlDisplayDrawingObjects DisplayDrawingObjects
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "DisplayDrawingObjects");
				return (LateBindingApi.Excel.Enums.XlDisplayDrawingObjects)returnValue;
			}
			set
			{
				Invoker.PropertySet(this, "DisplayDrawingObjects", value);
			}						
		}


		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public LateBindingApi.Excel.Enums.XlFileFormat FileFormat
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "FileFormat");
				return (LateBindingApi.Excel.Enums.XlFileFormat)returnValue;
			}
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public string FullName
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "FullName");
				return (string)returnValue;
			}
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public bool HasMailer
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "HasMailer");
				return (bool)returnValue;
			}
			set
			{
				Invoker.PropertySet(this, "HasMailer", value);
			}						
		}


		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public bool HasPassword
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "HasPassword");
				return (bool)returnValue;
			}
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public bool HasRoutingSlip
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "HasRoutingSlip");
				return (bool)returnValue;
			}
			set
			{
				Invoker.PropertySet(this, "HasRoutingSlip", value);
			}						
		}


		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public bool IsAddin
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "IsAddin");
				return (bool)returnValue;
			}
			set
			{
				Invoker.PropertySet(this, "IsAddin", value);
			}						
		}


		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public string Keywords
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "Keywords");
				return (string)returnValue;
			}
			set
			{
				Invoker.PropertySet(this, "Keywords", value);
			}						
		}


		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public LateBindingApi.Excel.Mailer Mailer
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "Mailer");
				if(null == returnValue)
					return null;
				LateBindingApi.Excel.Mailer newClass = new LateBindingApi.Excel.Mailer(this, returnValue);
				return newClass;
			}
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public LateBindingApi.Excel.Sheets Modules
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "Modules");
				if(null == returnValue)
					return null;
				LateBindingApi.Excel.Sheets newClass = new LateBindingApi.Excel.Sheets(this, returnValue);
				return newClass;
			}
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public bool MultiUserEditing
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "MultiUserEditing");
				return (bool)returnValue;
			}
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public string Name
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "Name");
				return (string)returnValue;
			}
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public LateBindingApi.Excel.Names Names
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "Names");
				if(null == returnValue)
					return null;
				LateBindingApi.Excel.Names newClass = new LateBindingApi.Excel.Names(this, returnValue);
				return newClass;
			}
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public string OnSave
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "OnSave");
				return (string)returnValue;
			}
			set
			{
				Invoker.PropertySet(this, "OnSave", value);
			}						
		}


		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public string OnSheetActivate
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "OnSheetActivate");
				return (string)returnValue;
			}
			set
			{
				Invoker.PropertySet(this, "OnSheetActivate", value);
			}						
		}


		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public string OnSheetDeactivate
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "OnSheetDeactivate");
				return (string)returnValue;
			}
			set
			{
				Invoker.PropertySet(this, "OnSheetDeactivate", value);
			}						
		}


		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public string Path
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "Path");
				return (string)returnValue;
			}
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public bool PersonalViewListSettings
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "PersonalViewListSettings");
				return (bool)returnValue;
			}
			set
			{
				Invoker.PropertySet(this, "PersonalViewListSettings", value);
			}						
		}


		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public bool PersonalViewPrintSettings
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "PersonalViewPrintSettings");
				return (bool)returnValue;
			}
			set
			{
				Invoker.PropertySet(this, "PersonalViewPrintSettings", value);
			}						
		}


		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public bool PrecisionAsDisplayed
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "PrecisionAsDisplayed");
				return (bool)returnValue;
			}
			set
			{
				Invoker.PropertySet(this, "PrecisionAsDisplayed", value);
			}						
		}


		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public bool ProtectStructure
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "ProtectStructure");
				return (bool)returnValue;
			}
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public bool ProtectWindows
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "ProtectWindows");
				return (bool)returnValue;
			}
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public bool ReadOnly
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "ReadOnly");
				return (bool)returnValue;
			}
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public bool ReadOnlyRecommended
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "ReadOnlyRecommended");
				return (bool)returnValue;
			}
			set
			{
				Invoker.PropertySet(this, "ReadOnlyRecommended", value);
			}						
		}


		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public Int32 RevisionNumber
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "RevisionNumber");
				return (Int32)returnValue;
			}
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public bool Routed
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "Routed");
				return (bool)returnValue;
			}
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public LateBindingApi.Excel.RoutingSlip RoutingSlip
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "RoutingSlip");
				if(null == returnValue)
					return null;
				LateBindingApi.Excel.RoutingSlip newClass = new LateBindingApi.Excel.RoutingSlip(this, returnValue);
				return newClass;
			}
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public bool Saved
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "Saved");
				return (bool)returnValue;
			}
			set
			{
				Invoker.PropertySet(this, "Saved", value);
			}						
		}


		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public bool SaveLinkValues
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "SaveLinkValues");
				return (bool)returnValue;
			}
			set
			{
				Invoker.PropertySet(this, "SaveLinkValues", value);
			}						
		}


		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public LateBindingApi.Excel.Sheets Sheets
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "Sheets");
				if(null == returnValue)
					return null;
				LateBindingApi.Excel.Sheets newClass = new LateBindingApi.Excel.Sheets(this, returnValue);
				return newClass;
			}
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public bool ShowConflictHistory
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "ShowConflictHistory");
				return (bool)returnValue;
			}
			set
			{
				Invoker.PropertySet(this, "ShowConflictHistory", value);
			}						
		}


		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public LateBindingApi.Excel.Styles Styles
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "Styles");
				if(null == returnValue)
					return null;
				LateBindingApi.Excel.Styles newClass = new LateBindingApi.Excel.Styles(this, returnValue);
				return newClass;
			}
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public string Subject
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "Subject");
				return (string)returnValue;
			}
			set
			{
				Invoker.PropertySet(this, "Subject", value);
			}						
		}


		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public string Title
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "Title");
				return (string)returnValue;
			}
			set
			{
				Invoker.PropertySet(this, "Title", value);
			}						
		}


		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public bool UpdateRemoteReferences
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "UpdateRemoteReferences");
				return (bool)returnValue;
			}
			set
			{
				Invoker.PropertySet(this, "UpdateRemoteReferences", value);
			}						
		}


		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public bool UserControl
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "UserControl");
				return (bool)returnValue;
			}
			set
			{
				Invoker.PropertySet(this, "UserControl", value);
			}						
		}


		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public COMVariant UserStatus
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "UserStatus");
				COMVariant returnObject = LateBindingApi.Core.Factory.CreateVariantFromComProxy(this, returnValue);
				return returnObject;
			}
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public LateBindingApi.Excel.CustomViews CustomViews
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "CustomViews");
				if(null == returnValue)
					return null;
				LateBindingApi.Excel.CustomViews newClass = new LateBindingApi.Excel.CustomViews(this, returnValue);
				return newClass;
			}
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public LateBindingApi.Excel.Windows Windows
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "Windows");
				if(null == returnValue)
					return null;
				LateBindingApi.Excel.Windows newClass = new LateBindingApi.Excel.Windows(this, returnValue);
				return newClass;
			}
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public LateBindingApi.Excel.Worksheets Worksheets
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "Worksheets");
				if(null == returnValue)
					return null;
				LateBindingApi.Excel.Worksheets newClass = new LateBindingApi.Excel.Worksheets(this, returnValue);
				return newClass;
			}
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public bool WriteReserved
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "WriteReserved");
				return (bool)returnValue;
			}
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public string WriteReservedBy
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "WriteReservedBy");
				return (string)returnValue;
			}
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public LateBindingApi.Excel.Sheets Excel4IntlMacroSheets
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "Excel4IntlMacroSheets");
				if(null == returnValue)
					return null;
				LateBindingApi.Excel.Sheets newClass = new LateBindingApi.Excel.Sheets(this, returnValue);
				return newClass;
			}
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public LateBindingApi.Excel.Sheets Excel4MacroSheets
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "Excel4MacroSheets");
				if(null == returnValue)
					return null;
				LateBindingApi.Excel.Sheets newClass = new LateBindingApi.Excel.Sheets(this, returnValue);
				return newClass;
			}
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public bool TemplateRemoveExtData
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "TemplateRemoveExtData");
				return (bool)returnValue;
			}
			set
			{
				Invoker.PropertySet(this, "TemplateRemoveExtData", value);
			}						
		}


		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public bool HighlightChangesOnScreen
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "HighlightChangesOnScreen");
				return (bool)returnValue;
			}
			set
			{
				Invoker.PropertySet(this, "HighlightChangesOnScreen", value);
			}						
		}


		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public bool KeepChangeHistory
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "KeepChangeHistory");
				return (bool)returnValue;
			}
			set
			{
				Invoker.PropertySet(this, "KeepChangeHistory", value);
			}						
		}


		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public bool ListChangesOnNewSheet
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "ListChangesOnNewSheet");
				return (bool)returnValue;
			}
			set
			{
				Invoker.PropertySet(this, "ListChangesOnNewSheet", value);
			}						
		}


		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public LateBindingApi.VBIDE.VBProject VBProject
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "VBProject");
				if(null == returnValue)
					return null;
				LateBindingApi.VBIDE.VBProject newClass = new LateBindingApi.VBIDE.VBProject(this, returnValue);
				return newClass;
			}
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public bool IsInplace
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "IsInplace");
				return (bool)returnValue;
			}
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public LateBindingApi.Excel.PublishObjects PublishObjects
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "PublishObjects");
				if(null == returnValue)
					return null;
				LateBindingApi.Excel.PublishObjects newClass = new LateBindingApi.Excel.PublishObjects(this, returnValue);
				return newClass;
			}
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public LateBindingApi.Excel.WebOptions WebOptions
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "WebOptions");
				if(null == returnValue)
					return null;
				LateBindingApi.Excel.WebOptions newClass = new LateBindingApi.Excel.WebOptions(this, returnValue);
				return newClass;
			}
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public LateBindingApi.Office.HTMLProject HTMLProject
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "HTMLProject");
				if(null == returnValue)
					return null;
				LateBindingApi.Office.HTMLProject newClass = new LateBindingApi.Office.HTMLProject(this, returnValue);
				return newClass;
			}
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public bool EnvelopeVisible
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "EnvelopeVisible");
				return (bool)returnValue;
			}
			set
			{
				Invoker.PropertySet(this, "EnvelopeVisible", value);
			}						
		}


		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public Int32 CalculationVersion
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "CalculationVersion");
				return (Int32)returnValue;
			}
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public bool VBASigned
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "VBASigned");
				return (bool)returnValue;
			}
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14")]
		public bool _ReadOnlyRecommended
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "_ReadOnlyRecommended");
				return (bool)returnValue;
			}
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14")]
		public bool ShowPivotTableFieldList
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "ShowPivotTableFieldList");
				return (bool)returnValue;
			}
			set
			{
				Invoker.PropertySet(this, "ShowPivotTableFieldList", value);
			}						
		}


		[SupportByLibrary("XL10","XL11","XL12","XL14")]
		public LateBindingApi.Excel.Enums.XlUpdateLinks UpdateLinks
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "UpdateLinks");
				return (LateBindingApi.Excel.Enums.XlUpdateLinks)returnValue;
			}
			set
			{
				Invoker.PropertySet(this, "UpdateLinks", value);
			}						
		}


		[SupportByLibrary("XL10","XL11","XL12","XL14")]
		public bool EnableAutoRecover
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "EnableAutoRecover");
				return (bool)returnValue;
			}
			set
			{
				Invoker.PropertySet(this, "EnableAutoRecover", value);
			}						
		}


		[SupportByLibrary("XL10","XL11","XL12","XL14")]
		public bool RemovePersonalInformation
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "RemovePersonalInformation");
				return (bool)returnValue;
			}
			set
			{
				Invoker.PropertySet(this, "RemovePersonalInformation", value);
			}						
		}


		[SupportByLibrary("XL10","XL11","XL12","XL14")]
		public string FullNameURLEncoded
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "FullNameURLEncoded");
				return (string)returnValue;
			}
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14")]
		public string Password
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "Password");
				return (string)returnValue;
			}
			set
			{
				Invoker.PropertySet(this, "Password", value);
			}						
		}


		[SupportByLibrary("XL10","XL11","XL12","XL14")]
		public string WritePassword
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "WritePassword");
				return (string)returnValue;
			}
			set
			{
				Invoker.PropertySet(this, "WritePassword", value);
			}						
		}


		[SupportByLibrary("XL10","XL11","XL12","XL14")]
		public string PasswordEncryptionProvider
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "PasswordEncryptionProvider");
				return (string)returnValue;
			}
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14")]
		public string PasswordEncryptionAlgorithm
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "PasswordEncryptionAlgorithm");
				return (string)returnValue;
			}
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14")]
		public Int32 PasswordEncryptionKeyLength
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "PasswordEncryptionKeyLength");
				return (Int32)returnValue;
			}
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14")]
		public bool PasswordEncryptionFileProperties
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "PasswordEncryptionFileProperties");
				return (bool)returnValue;
			}
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14")]
		public LateBindingApi.Excel.SmartTagOptions SmartTagOptions
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "SmartTagOptions");
				if(null == returnValue)
					return null;
				LateBindingApi.Excel.SmartTagOptions newClass = new LateBindingApi.Excel.SmartTagOptions(this, returnValue);
				return newClass;
			}
		}

		[SupportByLibrary("XL11","XL12","XL14")]
		public LateBindingApi.Office.Permission Permission
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "Permission");
				if(null == returnValue)
					return null;
				LateBindingApi.Office.Permission newClass = new LateBindingApi.Office.Permission(this, returnValue);
				return newClass;
			}
		}

		[SupportByLibrary("XL11","XL12","XL14")]
		public LateBindingApi.Office.SharedWorkspace SharedWorkspace
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "SharedWorkspace");
				if(null == returnValue)
					return null;
				LateBindingApi.Office.SharedWorkspace newClass = new LateBindingApi.Office.SharedWorkspace(this, returnValue);
				return newClass;
			}
		}

		[SupportByLibrary("XL11","XL12","XL14")]
		public LateBindingApi.Office.Sync Sync
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "Sync");
				if(null == returnValue)
					return null;
				LateBindingApi.Office.Sync newClass = new LateBindingApi.Office.Sync(this, returnValue);
				return newClass;
			}
		}

		[SupportByLibrary("XL11","XL12","XL14")]
		public LateBindingApi.Excel.XmlNamespaces XmlNamespaces
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "XmlNamespaces");
				if(null == returnValue)
					return null;
				LateBindingApi.Excel.XmlNamespaces newClass = new LateBindingApi.Excel.XmlNamespaces(this, returnValue);
				return newClass;
			}
		}

		[SupportByLibrary("XL11","XL12","XL14")]
		public LateBindingApi.Excel.XmlMaps XmlMaps
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "XmlMaps");
				if(null == returnValue)
					return null;
				LateBindingApi.Excel.XmlMaps newClass = new LateBindingApi.Excel.XmlMaps(this, returnValue);
				return newClass;
			}
		}

		[SupportByLibrary("XL11","XL12","XL14")]
		public LateBindingApi.Office.SmartDocument SmartDocument
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "SmartDocument");
				if(null == returnValue)
					return null;
				LateBindingApi.Office.SmartDocument newClass = new LateBindingApi.Office.SmartDocument(this, returnValue);
				return newClass;
			}
		}

		[SupportByLibrary("XL11","XL12","XL14")]
		public LateBindingApi.Office.DocumentLibraryVersions DocumentLibraryVersions
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "DocumentLibraryVersions");
				if(null == returnValue)
					return null;
				LateBindingApi.Office.DocumentLibraryVersions newClass = new LateBindingApi.Office.DocumentLibraryVersions(this, returnValue);
				return newClass;
			}
		}

		[SupportByLibrary("XL11","XL12","XL14")]
		public bool InactiveListBorderVisible
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "InactiveListBorderVisible");
				return (bool)returnValue;
			}
			set
			{
				Invoker.PropertySet(this, "InactiveListBorderVisible", value);
			}						
		}


		[SupportByLibrary("XL11","XL12","XL14")]
		public bool DisplayInkComments
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "DisplayInkComments");
				return (bool)returnValue;
			}
			set
			{
				Invoker.PropertySet(this, "DisplayInkComments", value);
			}						
		}


		[SupportByLibrary("XL12","XL14")]
		public LateBindingApi.Office.MetaProperties ContentTypeProperties
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "ContentTypeProperties");
				if(null == returnValue)
					return null;
				LateBindingApi.Office.MetaProperties newClass = new LateBindingApi.Office.MetaProperties(this, returnValue);
				return newClass;
			}
		}

		[SupportByLibrary("XL12","XL14")]
		public LateBindingApi.Excel.Connections Connections
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "Connections");
				if(null == returnValue)
					return null;
				LateBindingApi.Excel.Connections newClass = new LateBindingApi.Excel.Connections(this, returnValue);
				return newClass;
			}
		}

		[SupportByLibrary("XL12","XL14")]
		public LateBindingApi.Office.SignatureSet Signatures
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "Signatures");
				if(null == returnValue)
					return null;
				LateBindingApi.Office.SignatureSet newClass = new LateBindingApi.Office.SignatureSet(this, returnValue);
				return newClass;
			}
		}

		[SupportByLibrary("XL12","XL14")]
		public LateBindingApi.Office.ServerPolicy ServerPolicy
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "ServerPolicy");
				if(null == returnValue)
					return null;
				LateBindingApi.Office.ServerPolicy newClass = new LateBindingApi.Office.ServerPolicy(this, returnValue);
				return newClass;
			}
		}

		[SupportByLibrary("XL12","XL14")]
		public LateBindingApi.Office.DocumentInspectors DocumentInspectors
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "DocumentInspectors");
				if(null == returnValue)
					return null;
				LateBindingApi.Office.DocumentInspectors newClass = new LateBindingApi.Office.DocumentInspectors(this, returnValue);
				return newClass;
			}
		}

		[SupportByLibrary("XL12","XL14")]
		public LateBindingApi.Excel.ServerViewableItems ServerViewableItems
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "ServerViewableItems");
				if(null == returnValue)
					return null;
				LateBindingApi.Excel.ServerViewableItems newClass = new LateBindingApi.Excel.ServerViewableItems(this, returnValue);
				return newClass;
			}
		}

		[SupportByLibrary("XL12","XL14")]
		public LateBindingApi.Excel.TableStyles TableStyles
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "TableStyles");
				if(null == returnValue)
					return null;
				LateBindingApi.Excel.TableStyles newClass = new LateBindingApi.Excel.TableStyles(this, returnValue);
				return newClass;
			}
		}

		[SupportByLibrary("XL12","XL14")]
		public COMVariant DefaultTableStyle
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "DefaultTableStyle");
				COMVariant returnObject = LateBindingApi.Core.Factory.CreateVariantFromComProxy(this, returnValue);
				return returnObject;
			}
			set
			{
				Invoker.PropertySet(this, "DefaultTableStyle", value);
			}						
		}


		[SupportByLibrary("XL12","XL14")]
		public COMVariant DefaultPivotTableStyle
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "DefaultPivotTableStyle");
				COMVariant returnObject = LateBindingApi.Core.Factory.CreateVariantFromComProxy(this, returnValue);
				return returnObject;
			}
			set
			{
				Invoker.PropertySet(this, "DefaultPivotTableStyle", value);
			}						
		}


		[SupportByLibrary("XL12","XL14")]
		public bool CheckCompatibility
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "CheckCompatibility");
				return (bool)returnValue;
			}
			set
			{
				Invoker.PropertySet(this, "CheckCompatibility", value);
			}						
		}


		[SupportByLibrary("XL12","XL14")]
		public bool HasVBProject
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "HasVBProject");
				return (bool)returnValue;
			}
		}

		[SupportByLibrary("XL12","XL14")]
		public LateBindingApi.Office.CustomXMLParts CustomXMLParts
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "CustomXMLParts");
				if(null == returnValue)
					return null;
				LateBindingApi.Office.CustomXMLParts newClass = new LateBindingApi.Office.CustomXMLParts(this, returnValue);
				return newClass;
			}
		}

		[SupportByLibrary("XL12","XL14")]
		public bool Final
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "Final");
				return (bool)returnValue;
			}
			set
			{
				Invoker.PropertySet(this, "Final", value);
			}						
		}


		[SupportByLibrary("XL12","XL14")]
		public LateBindingApi.Excel.Research Research
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "Research");
				if(null == returnValue)
					return null;
				LateBindingApi.Excel.Research newClass = new LateBindingApi.Excel.Research(this, returnValue);
				return newClass;
			}
		}

		[SupportByLibrary("XL12","XL14")]
		public LateBindingApi.Office.OfficeTheme Theme
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "Theme");
				if(null == returnValue)
					return null;
				LateBindingApi.Office.OfficeTheme newClass = new LateBindingApi.Office.OfficeTheme(this, returnValue);
				return newClass;
			}
		}

		[SupportByLibrary("XL12","XL14")]
		public bool Excel8CompatibilityMode
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "Excel8CompatibilityMode");
				return (bool)returnValue;
			}
		}

		[SupportByLibrary("XL12","XL14")]
		public bool ConnectionsDisabled
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "ConnectionsDisabled");
				return (bool)returnValue;
			}
		}

		[SupportByLibrary("XL12","XL14")]
		public bool ShowPivotChartActiveFields
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "ShowPivotChartActiveFields");
				return (bool)returnValue;
			}
			set
			{
				Invoker.PropertySet(this, "ShowPivotChartActiveFields", value);
			}						
		}


		[SupportByLibrary("XL12","XL14")]
		public LateBindingApi.Excel.IconSets IconSets
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "IconSets");
				if(null == returnValue)
					return null;
				LateBindingApi.Excel.IconSets newClass = new LateBindingApi.Excel.IconSets(this, returnValue);
				return newClass;
			}
		}

		[SupportByLibrary("XL12","XL14")]
		public string EncryptionProvider
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "EncryptionProvider");
				return (string)returnValue;
			}
			set
			{
				Invoker.PropertySet(this, "EncryptionProvider", value);
			}						
		}


		[SupportByLibrary("XL12","XL14")]
		public bool DoNotPromptForConvert
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "DoNotPromptForConvert");
				return (bool)returnValue;
			}
			set
			{
				Invoker.PropertySet(this, "DoNotPromptForConvert", value);
			}						
		}


		[SupportByLibrary("XL12","XL14")]
		public bool ForceFullCalculation
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "ForceFullCalculation");
				return (bool)returnValue;
			}
			set
			{
				Invoker.PropertySet(this, "ForceFullCalculation", value);
			}						
		}


		[SupportByLibrary("XL14")]
		public LateBindingApi.Excel.SlicerCaches SlicerCaches
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "SlicerCaches");
				if(null == returnValue)
					return null;
				LateBindingApi.Excel.SlicerCaches newClass = new LateBindingApi.Excel.SlicerCaches(this, returnValue);
				return newClass;
			}
		}

		[SupportByLibrary("XL14")]
		public LateBindingApi.Excel.Slicer ActiveSlicer
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "ActiveSlicer");
				if(null == returnValue)
					return null;
				LateBindingApi.Excel.Slicer newClass = new LateBindingApi.Excel.Slicer(this, returnValue);
				return newClass;
			}
		}

		[SupportByLibrary("XL14")]
		public COMVariant DefaultSlicerStyle
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "DefaultSlicerStyle");
				COMVariant returnObject = LateBindingApi.Core.Factory.CreateVariantFromComProxy(this, returnValue);
				return returnObject;
			}
			set
			{
				Invoker.PropertySet(this, "DefaultSlicerStyle", value);
			}						
		}


		[SupportByLibrary("XL14")]
		public Int32 AccuracyVersion
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "AccuracyVersion");
				return (Int32)returnValue;
			}
			set
			{
				Invoker.PropertySet(this, "AccuracyVersion", value);
			}						
		}


		#endregion

		#region Methods

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public void Activate()
		{
			Invoker.Method(this, "Activate", null);
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public void ChangeFileAccess(LateBindingApi.Excel.Enums.XlFileAccess mode)
		{
			object[] paramArray = new object[1];
			paramArray[0] = mode;
			Invoker.Method(this, "ChangeFileAccess", paramArray);
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public void ChangeFileAccess(LateBindingApi.Excel.Enums.XlFileAccess mode, object writePassword, object notify)
		{
			object[] paramArray = new object[3];
			paramArray[0] = mode;
			paramArray[1] = writePassword;
			paramArray[2] = notify;
			Invoker.Method(this, "ChangeFileAccess", paramArray);
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public void ChangeLink(string name, string newName, LateBindingApi.Excel.Enums.XlLinkType type)
		{
			object[] paramArray = new object[3];
			paramArray[0] = name;
			paramArray[1] = newName;
			paramArray[2] = type;
			Invoker.Method(this, "ChangeLink", paramArray);
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public void Close()
		{
			Invoker.Method(this, "Close", null);
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public void Close(object saveChanges, object filename, object routeWorkbook)
		{
			object[] paramArray = new object[3];
			paramArray[0] = saveChanges;
			paramArray[1] = filename;
			paramArray[2] = routeWorkbook;
			Invoker.Method(this, "Close", paramArray);
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public void DeleteNumberFormat(string numberFormat)
		{
			object[] paramArray = new object[1];
			paramArray[0] = numberFormat;
			Invoker.Method(this, "DeleteNumberFormat", paramArray);
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public bool ExclusiveAccess()
		{
			object returnValue = Invoker.MethodReturn(this, "ExclusiveAccess", null);
			return (bool)returnValue;
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public void ForwardMailer()
		{
			Invoker.Method(this, "ForwardMailer", null);
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public COMVariant LinkInfo(string name, LateBindingApi.Excel.Enums.XlLinkInfo linkInfo)
		{
			object[] paramArray = new object[2];
			paramArray[0] = name;
			paramArray[1] = linkInfo;
			object returnValue = Invoker.MethodReturn(this, "LinkInfo", paramArray);
			COMVariant returnObject = LateBindingApi.Core.Factory.CreateVariantFromComProxy(this, returnValue);
			return returnObject;
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public COMVariant LinkInfo(string name, LateBindingApi.Excel.Enums.XlLinkInfo linkInfo, object type, object editionRef)
		{
			object[] paramArray = new object[4];
			paramArray[0] = name;
			paramArray[1] = linkInfo;
			paramArray[2] = type;
			paramArray[3] = editionRef;
			object returnValue = Invoker.MethodReturn(this, "LinkInfo", paramArray);
			COMVariant returnObject = LateBindingApi.Core.Factory.CreateVariantFromComProxy(this, returnValue);
			return returnObject;
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public COMVariant LinkSources()
		{
			object returnValue = Invoker.MethodReturn(this, "LinkSources", null);
			COMVariant returnObject = LateBindingApi.Core.Factory.CreateVariantFromComProxy(this, returnValue);
			return returnObject;
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public COMVariant LinkSources(object type)
		{
			object[] paramArray = new object[1];
			paramArray[0] = type;
			object returnValue = Invoker.MethodReturn(this, "LinkSources", paramArray);
			COMVariant returnObject = LateBindingApi.Core.Factory.CreateVariantFromComProxy(this, returnValue);
			return returnObject;
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public void MergeWorkbook(object filename)
		{
			object[] paramArray = new object[1];
			paramArray[0] = filename;
			Invoker.Method(this, "MergeWorkbook", paramArray);
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public LateBindingApi.Excel.Window NewWindow()
		{
			object returnValue = Invoker.MethodReturn(this, "NewWindow", null);
			if(null == returnValue)
				return null;
			LateBindingApi.Excel.Window newClass = new LateBindingApi.Excel.Window(this, returnValue);
			return newClass;
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public void OpenLinks(string name)
		{
			object[] paramArray = new object[1];
			paramArray[0] = name;
			Invoker.Method(this, "OpenLinks", paramArray);
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public void OpenLinks(string name, object _readOnly, object type)
		{
			object[] paramArray = new object[3];
			paramArray[0] = name;
			paramArray[1] = _readOnly;
			paramArray[2] = type;
			Invoker.Method(this, "OpenLinks", paramArray);
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public LateBindingApi.Excel.PivotCaches PivotCaches()
		{
			object returnValue = Invoker.MethodReturn(this, "PivotCaches", null);
			if(null == returnValue)
				return null;
			LateBindingApi.Excel.PivotCaches newClass = new LateBindingApi.Excel.PivotCaches(this, returnValue);
			return newClass;
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public void Post()
		{
			Invoker.Method(this, "Post", null);
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public void Post(object destName)
		{
			object[] paramArray = new object[1];
			paramArray[0] = destName;
			Invoker.Method(this, "Post", paramArray);
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public void _PrintOut()
		{
			Invoker.Method(this, "_PrintOut", null);
		}

		[SupportByLibrary("XL10","XL11","XL9")]
		public void _PrintOut(object from, object to, object copies, object preview, object activePrinter, object printToFile, object collate)
		{
			object[] paramArray = new object[7];
			paramArray[0] = from;
			paramArray[1] = to;
			paramArray[2] = copies;
			paramArray[3] = preview;
			paramArray[4] = activePrinter;
			paramArray[5] = printToFile;
			paramArray[6] = collate;
			Invoker.Method(this, "_PrintOut", paramArray);
		}

		[SupportByLibrary("XL12","XL14")]
		public void _PrintOut(object from, object to, object copies, object preview, object activePrinter, object printToFile, object collate, object prToFileName)
		{
			object[] paramArray = new object[8];
			paramArray[0] = from;
			paramArray[1] = to;
			paramArray[2] = copies;
			paramArray[3] = preview;
			paramArray[4] = activePrinter;
			paramArray[5] = printToFile;
			paramArray[6] = collate;
			paramArray[7] = prToFileName;
			Invoker.Method(this, "_PrintOut", paramArray);
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public void PrintPreview()
		{
			Invoker.Method(this, "PrintPreview", null);
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public void PrintPreview(object enableChanges)
		{
			object[] paramArray = new object[1];
			paramArray[0] = enableChanges;
			Invoker.Method(this, "PrintPreview", paramArray);
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public void Protect()
		{
			Invoker.Method(this, "Protect", null);
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public void Protect(object password, object structure, object windows)
		{
			object[] paramArray = new object[3];
			paramArray[0] = password;
			paramArray[1] = structure;
			paramArray[2] = windows;
			Invoker.Method(this, "Protect", paramArray);
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public void ProtectSharing()
		{
			Invoker.Method(this, "ProtectSharing", null);
		}

		[SupportByLibrary("XL10","XL11","XL9")]
		public void ProtectSharing(object filename, object password, object writeResPassword, object readOnlyRecommended, object createBackup, object sharingPassword)
		{
			object[] paramArray = new object[6];
			paramArray[0] = filename;
			paramArray[1] = password;
			paramArray[2] = writeResPassword;
			paramArray[3] = readOnlyRecommended;
			paramArray[4] = createBackup;
			paramArray[5] = sharingPassword;
			Invoker.Method(this, "ProtectSharing", paramArray);
		}

		[SupportByLibrary("XL12","XL14")]
		public void ProtectSharing(object filename, object password, object writeResPassword, object readOnlyRecommended, object createBackup, object sharingPassword, object fileFormat)
		{
			object[] paramArray = new object[7];
			paramArray[0] = filename;
			paramArray[1] = password;
			paramArray[2] = writeResPassword;
			paramArray[3] = readOnlyRecommended;
			paramArray[4] = createBackup;
			paramArray[5] = sharingPassword;
			paramArray[6] = fileFormat;
			Invoker.Method(this, "ProtectSharing", paramArray);
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public void RefreshAll()
		{
			Invoker.Method(this, "RefreshAll", null);
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public void Reply()
		{
			Invoker.Method(this, "Reply", null);
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public void ReplyAll()
		{
			Invoker.Method(this, "ReplyAll", null);
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public void RemoveUser(Int32 index)
		{
			object[] paramArray = new object[1];
			paramArray[0] = index;
			Invoker.Method(this, "RemoveUser", paramArray);
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public void Route()
		{
			Invoker.Method(this, "Route", null);
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public void RunAutoMacros(LateBindingApi.Excel.Enums.XlRunAutoMacro which)
		{
			object[] paramArray = new object[1];
			paramArray[0] = which;
			Invoker.Method(this, "RunAutoMacros", paramArray);
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public void Save()
		{
			Invoker.Method(this, "Save", null);
		}

        [SupportByLibrary( "XL10", "XL11", "XL12", "XL14","XL9")]
        public void SaveAs(object filename)
        {
            object[] paramArray = new object[1];
            paramArray[0] = filename;
            Invoker.Method(this, "SaveAs", paramArray);
        }

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public void SaveAs(object filename, object fileFormat, object password, object writeResPassword, object readOnlyRecommended, object createBackup, LateBindingApi.Excel.Enums.XlSaveAsAccessMode accessMode)
		{
			object[] paramArray = new object[7];
			paramArray[0] = filename;
			paramArray[1] = fileFormat;
			paramArray[2] = password;
			paramArray[3] = writeResPassword;
			paramArray[4] = readOnlyRecommended;
			paramArray[5] = createBackup;
			paramArray[6] = accessMode;
			Invoker.Method(this, "SaveAs", paramArray);
		}

		[SupportByLibrary("XL9")]
		public void SaveAs(object filename, object fileFormat, object password, object writeResPassword, object readOnlyRecommended, object createBackup, LateBindingApi.Excel.Enums.XlSaveAsAccessMode accessMode, object conflictResolution, object addToMru, object textCodepage, object textVisualLayout)
		{
			object[] paramArray = new object[11];
			paramArray[0] = filename;
			paramArray[1] = fileFormat;
			paramArray[2] = password;
			paramArray[3] = writeResPassword;
			paramArray[4] = readOnlyRecommended;
			paramArray[5] = createBackup;
			paramArray[6] = accessMode;
			paramArray[7] = conflictResolution;
			paramArray[8] = addToMru;
			paramArray[9] = textCodepage;
			paramArray[10] = textVisualLayout;
			Invoker.Method(this, "SaveAs", paramArray);
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14")]
		public void SaveAs(object filename, object fileFormat, object password, object writeResPassword, object readOnlyRecommended, object createBackup, LateBindingApi.Excel.Enums.XlSaveAsAccessMode accessMode, object conflictResolution, object addToMru, object textCodepage, object textVisualLayout, object local)
		{
			object[] paramArray = new object[12];
			paramArray[0] = filename;
			paramArray[1] = fileFormat;
			paramArray[2] = password;
			paramArray[3] = writeResPassword;
			paramArray[4] = readOnlyRecommended;
			paramArray[5] = createBackup;
			paramArray[6] = accessMode;
			paramArray[7] = conflictResolution;
			paramArray[8] = addToMru;
			paramArray[9] = textCodepage;
			paramArray[10] = textVisualLayout;
			paramArray[11] = local;
			Invoker.Method(this, "SaveAs", paramArray);
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public void SaveCopyAs()
		{
			Invoker.Method(this, "SaveCopyAs", null);
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public void SaveCopyAs(object filename)
		{
			object[] paramArray = new object[1];
			paramArray[0] = filename;
			Invoker.Method(this, "SaveCopyAs", paramArray);
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public void SendMail(object recipients)
		{
			object[] paramArray = new object[1];
			paramArray[0] = recipients;
			Invoker.Method(this, "SendMail", paramArray);
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public void SendMail(object recipients, object subject, object returnReceipt)
		{
			object[] paramArray = new object[3];
			paramArray[0] = recipients;
			paramArray[1] = subject;
			paramArray[2] = returnReceipt;
			Invoker.Method(this, "SendMail", paramArray);
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public void SendMailer(object fileFormat, LateBindingApi.Excel.Enums.XlPriority priority)
		{
			object[] paramArray = new object[2];
			paramArray[0] = fileFormat;
			paramArray[1] = priority;
			Invoker.Method(this, "SendMailer", paramArray);
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public void SetLinkOnData(string name)
		{
			object[] paramArray = new object[1];
			paramArray[0] = name;
			Invoker.Method(this, "SetLinkOnData", paramArray);
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public void SetLinkOnData(string name, object procedure)
		{
			object[] paramArray = new object[2];
			paramArray[0] = name;
			paramArray[1] = procedure;
			Invoker.Method(this, "SetLinkOnData", paramArray);
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public void Unprotect()
		{
			Invoker.Method(this, "Unprotect", null);
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public void Unprotect(object password)
		{
			object[] paramArray = new object[1];
			paramArray[0] = password;
			Invoker.Method(this, "Unprotect", paramArray);
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public void UnprotectSharing()
		{
			Invoker.Method(this, "UnprotectSharing", null);
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public void UnprotectSharing(object sharingPassword)
		{
			object[] paramArray = new object[1];
			paramArray[0] = sharingPassword;
			Invoker.Method(this, "UnprotectSharing", paramArray);
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public void UpdateFromFile()
		{
			Invoker.Method(this, "UpdateFromFile", null);
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public void UpdateLink()
		{
			Invoker.Method(this, "UpdateLink", null);
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public void UpdateLink(object name, object type)
		{
			object[] paramArray = new object[2];
			paramArray[0] = name;
			paramArray[1] = type;
			Invoker.Method(this, "UpdateLink", paramArray);
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public void HighlightChangesOptions()
		{
			Invoker.Method(this, "HighlightChangesOptions", null);
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public void HighlightChangesOptions(object when, object who, object where)
		{
			object[] paramArray = new object[3];
			paramArray[0] = when;
			paramArray[1] = who;
			paramArray[2] = where;
			Invoker.Method(this, "HighlightChangesOptions", paramArray);
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public void PurgeChangeHistoryNow(Int32 days)
		{
			object[] paramArray = new object[1];
			paramArray[0] = days;
			Invoker.Method(this, "PurgeChangeHistoryNow", paramArray);
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public void PurgeChangeHistoryNow(Int32 days, object sharingPassword)
		{
			object[] paramArray = new object[2];
			paramArray[0] = days;
			paramArray[1] = sharingPassword;
			Invoker.Method(this, "PurgeChangeHistoryNow", paramArray);
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public void AcceptAllChanges()
		{
			Invoker.Method(this, "AcceptAllChanges", null);
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public void AcceptAllChanges(object when, object who, object where)
		{
			object[] paramArray = new object[3];
			paramArray[0] = when;
			paramArray[1] = who;
			paramArray[2] = where;
			Invoker.Method(this, "AcceptAllChanges", paramArray);
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public void RejectAllChanges()
		{
			Invoker.Method(this, "RejectAllChanges", null);
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public void RejectAllChanges(object when, object who, object where)
		{
			object[] paramArray = new object[3];
			paramArray[0] = when;
			paramArray[1] = who;
			paramArray[2] = where;
			Invoker.Method(this, "RejectAllChanges", paramArray);
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public void PivotTableWizard()
		{
			Invoker.Method(this, "PivotTableWizard", null);
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public void PivotTableWizard(object sourceType, object sourceData, object tableDestination, object tableName, object rowGrand, object columnGrand, object saveData, object hasAutoFormat, object autoPage, object reserved, object backgroundQuery, object optimizeCache, object pageFieldOrder, object pageFieldWrapCount, object readData, object connection)
		{
			object[] paramArray = new object[16];
			paramArray[0] = sourceType;
			paramArray[1] = sourceData;
			paramArray[2] = tableDestination;
			paramArray[3] = tableName;
			paramArray[4] = rowGrand;
			paramArray[5] = columnGrand;
			paramArray[6] = saveData;
			paramArray[7] = hasAutoFormat;
			paramArray[8] = autoPage;
			paramArray[9] = reserved;
			paramArray[10] = backgroundQuery;
			paramArray[11] = optimizeCache;
			paramArray[12] = pageFieldOrder;
			paramArray[13] = pageFieldWrapCount;
			paramArray[14] = readData;
			paramArray[15] = connection;
			Invoker.Method(this, "PivotTableWizard", paramArray);
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public void ResetColors()
		{
			Invoker.Method(this, "ResetColors", null);
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public void FollowHyperlink(string address)
		{
			object[] paramArray = new object[1];
			paramArray[0] = address;
			Invoker.Method(this, "FollowHyperlink", paramArray);
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public void FollowHyperlink(string address, object subAddress, object newWindow, object addHistory, object extraInfo, object method, object headerInfo)
		{
			object[] paramArray = new object[7];
			paramArray[0] = address;
			paramArray[1] = subAddress;
			paramArray[2] = newWindow;
			paramArray[3] = addHistory;
			paramArray[4] = extraInfo;
			paramArray[5] = method;
			paramArray[6] = headerInfo;
			Invoker.Method(this, "FollowHyperlink", paramArray);
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public void AddToFavorites()
		{
			Invoker.Method(this, "AddToFavorites", null);
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public void PrintOut()
		{
			Invoker.Method(this, "PrintOut", null);
		}

		[SupportByLibrary("XL10","XL11","XL9")]
		public void PrintOut(object from, object to, object copies, object preview, object activePrinter, object printToFile, object collate, object prToFileName)
		{
			object[] paramArray = new object[8];
			paramArray[0] = from;
			paramArray[1] = to;
			paramArray[2] = copies;
			paramArray[3] = preview;
			paramArray[4] = activePrinter;
			paramArray[5] = printToFile;
			paramArray[6] = collate;
			paramArray[7] = prToFileName;
			Invoker.Method(this, "PrintOut", paramArray);
		}

		[SupportByLibrary("XL12","XL14")]
		public void PrintOut(object from, object to, object copies, object preview, object activePrinter, object printToFile, object collate, object prToFileName, object ignorePrintAreas)
		{
			object[] paramArray = new object[9];
			paramArray[0] = from;
			paramArray[1] = to;
			paramArray[2] = copies;
			paramArray[3] = preview;
			paramArray[4] = activePrinter;
			paramArray[5] = printToFile;
			paramArray[6] = collate;
			paramArray[7] = prToFileName;
			paramArray[8] = ignorePrintAreas;
			Invoker.Method(this, "PrintOut", paramArray);
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public void WebPagePreview()
		{
			Invoker.Method(this, "WebPagePreview", null);
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public void ReloadAs(LateBindingApi.Office.Enums.MsoEncoding encoding)
		{
			object[] paramArray = new object[1];
			paramArray[0] = encoding;
			Invoker.Method(this, "ReloadAs", paramArray);
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public void sblt(string s)
		{
			object[] paramArray = new object[1];
			paramArray[0] = s;
			Invoker.Method(this, "sblt", paramArray);
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14")]
		public void _Protect()
		{
			Invoker.Method(this, "_Protect", null);
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14")]
		public void _Protect(object password, object structure, object windows)
		{
			object[] paramArray = new object[3];
			paramArray[0] = password;
			paramArray[1] = structure;
			paramArray[2] = windows;
			Invoker.Method(this, "_Protect", paramArray);
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14")]
		public void _SaveAs(object filename, object fileFormat, object password, object writeResPassword, object readOnlyRecommended, object createBackup, LateBindingApi.Excel.Enums.XlSaveAsAccessMode accessMode)
		{
			object[] paramArray = new object[7];
			paramArray[0] = filename;
			paramArray[1] = fileFormat;
			paramArray[2] = password;
			paramArray[3] = writeResPassword;
			paramArray[4] = readOnlyRecommended;
			paramArray[5] = createBackup;
			paramArray[6] = accessMode;
			Invoker.Method(this, "_SaveAs", paramArray);
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14")]
		public void _SaveAs(object filename, object fileFormat, object password, object writeResPassword, object readOnlyRecommended, object createBackup, LateBindingApi.Excel.Enums.XlSaveAsAccessMode accessMode, object conflictResolution, object addToMru, object textCodepage, object textVisualLayout)
		{
			object[] paramArray = new object[11];
			paramArray[0] = filename;
			paramArray[1] = fileFormat;
			paramArray[2] = password;
			paramArray[3] = writeResPassword;
			paramArray[4] = readOnlyRecommended;
			paramArray[5] = createBackup;
			paramArray[6] = accessMode;
			paramArray[7] = conflictResolution;
			paramArray[8] = addToMru;
			paramArray[9] = textCodepage;
			paramArray[10] = textVisualLayout;
			Invoker.Method(this, "_SaveAs", paramArray);
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14")]
		public void BreakLink(string name, LateBindingApi.Excel.Enums.XlLinkType type)
		{
			object[] paramArray = new object[2];
			paramArray[0] = name;
			paramArray[1] = type;
			Invoker.Method(this, "BreakLink", paramArray);
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14")]
		public void CheckIn()
		{
			Invoker.Method(this, "CheckIn", null);
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14")]
		public void CheckIn(object saveChanges, object comments, object makePublic)
		{
			object[] paramArray = new object[3];
			paramArray[0] = saveChanges;
			paramArray[1] = comments;
			paramArray[2] = makePublic;
			Invoker.Method(this, "CheckIn", paramArray);
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14")]
		public bool CanCheckIn()
		{
			object returnValue = Invoker.MethodReturn(this, "CanCheckIn", null);
			return (bool)returnValue;
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14")]
		public void SendForReview()
		{
			Invoker.Method(this, "SendForReview", null);
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14")]
		public void SendForReview(object recipients, object subject, object showMessage, object includeAttachment)
		{
			object[] paramArray = new object[4];
			paramArray[0] = recipients;
			paramArray[1] = subject;
			paramArray[2] = showMessage;
			paramArray[3] = includeAttachment;
			Invoker.Method(this, "SendForReview", paramArray);
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14")]
		public void ReplyWithChanges()
		{
			Invoker.Method(this, "ReplyWithChanges", null);
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14")]
		public void ReplyWithChanges(object showMessage)
		{
			object[] paramArray = new object[1];
			paramArray[0] = showMessage;
			Invoker.Method(this, "ReplyWithChanges", paramArray);
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14")]
		public void EndReview()
		{
			Invoker.Method(this, "EndReview", null);
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14")]
		public void SetPasswordEncryptionOptions()
		{
			Invoker.Method(this, "SetPasswordEncryptionOptions", null);
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14")]
		public void SetPasswordEncryptionOptions(object passwordEncryptionProvider, object passwordEncryptionAlgorithm, object passwordEncryptionKeyLength, object passwordEncryptionFileProperties)
		{
			object[] paramArray = new object[4];
			paramArray[0] = passwordEncryptionProvider;
			paramArray[1] = passwordEncryptionAlgorithm;
			paramArray[2] = passwordEncryptionKeyLength;
			paramArray[3] = passwordEncryptionFileProperties;
			Invoker.Method(this, "SetPasswordEncryptionOptions", paramArray);
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14")]
		public void RecheckSmartTags()
		{
			Invoker.Method(this, "RecheckSmartTags", null);
		}

		[SupportByLibrary("XL11","XL12","XL14")]
		public void SendFaxOverInternet()
		{
			Invoker.Method(this, "SendFaxOverInternet", null);
		}

		[SupportByLibrary("XL11","XL12","XL14")]
		public void SendFaxOverInternet(object recipients, object subject, object showMessage)
		{
			object[] paramArray = new object[3];
			paramArray[0] = recipients;
			paramArray[1] = subject;
			paramArray[2] = showMessage;
			Invoker.Method(this, "SendFaxOverInternet", paramArray);
		}

		[SupportByLibrary("XL11","XL12","XL14")]
		public LateBindingApi.Excel.Enums.XlXmlImportResult XmlImport(string url, LateBindingApi.Excel.XmlMap importMap)
		{
			object[] paramArray = new object[2];
			paramArray[0] = url;
			paramArray.SetValue(importMap,1);
			object returnValue = Invoker.MethodReturn(this, "XmlImport", paramArray);
			return (LateBindingApi.Excel.Enums.XlXmlImportResult)returnValue;
		}

		[SupportByLibrary("XL11","XL12","XL14")]
		public LateBindingApi.Excel.Enums.XlXmlImportResult XmlImport(string url, LateBindingApi.Excel.XmlMap importMap, object overwrite, object destination)
		{
			object[] paramArray = new object[4];
			paramArray[0] = url;
			paramArray.SetValue(importMap,1);
			paramArray[2] = overwrite;
			paramArray[3] = destination;
			object returnValue = Invoker.MethodReturn(this, "XmlImport", paramArray);
			return (LateBindingApi.Excel.Enums.XlXmlImportResult)returnValue;
		}

		[SupportByLibrary("XL11","XL12","XL14")]
		public LateBindingApi.Excel.Enums.XlXmlImportResult XmlImportXml(string data, LateBindingApi.Excel.XmlMap importMap)
		{
			object[] paramArray = new object[2];
			paramArray[0] = data;
			paramArray.SetValue(importMap,1);
			object returnValue = Invoker.MethodReturn(this, "XmlImportXml", paramArray);
			return (LateBindingApi.Excel.Enums.XlXmlImportResult)returnValue;
		}

		[SupportByLibrary("XL11","XL12","XL14")]
		public LateBindingApi.Excel.Enums.XlXmlImportResult XmlImportXml(string data, LateBindingApi.Excel.XmlMap importMap, object overwrite, object destination)
		{
			object[] paramArray = new object[4];
			paramArray[0] = data;
			paramArray.SetValue(importMap,1);
			paramArray[2] = overwrite;
			paramArray[3] = destination;
			object returnValue = Invoker.MethodReturn(this, "XmlImportXml", paramArray);
			return (LateBindingApi.Excel.Enums.XlXmlImportResult)returnValue;
		}

		[SupportByLibrary("XL11","XL12","XL14")]
		public void SaveAsXMLData(string filename, LateBindingApi.Excel.XmlMap map)
		{
			object[] paramArray = new object[2];
			paramArray[0] = filename;
			paramArray.SetValue(map,1);
			Invoker.Method(this, "SaveAsXMLData", paramArray);
		}

		[SupportByLibrary("XL11","XL12","XL14")]
		public void ToggleFormsDesign()
		{
			Invoker.Method(this, "ToggleFormsDesign", null);
		}

		[SupportByLibrary("XL12","XL14")]
		public void __PrintOut()
		{
			Invoker.Method(this, "__PrintOut", null);
		}

		[SupportByLibrary("XL12","XL14")]
		public void __PrintOut(object from, object to, object copies, object preview, object activePrinter, object printToFile, object collate)
		{
			object[] paramArray = new object[7];
			paramArray[0] = from;
			paramArray[1] = to;
			paramArray[2] = copies;
			paramArray[3] = preview;
			paramArray[4] = activePrinter;
			paramArray[5] = printToFile;
			paramArray[6] = collate;
			Invoker.Method(this, "__PrintOut", paramArray);
		}

		[SupportByLibrary("XL12","XL14")]
		public void _ProtectSharing()
		{
			Invoker.Method(this, "_ProtectSharing", null);
		}

		[SupportByLibrary("XL12","XL14")]
		public void _ProtectSharing(object filename, object password, object writeResPassword, object readOnlyRecommended, object createBackup, object sharingPassword)
		{
			object[] paramArray = new object[6];
			paramArray[0] = filename;
			paramArray[1] = password;
			paramArray[2] = writeResPassword;
			paramArray[3] = readOnlyRecommended;
			paramArray[4] = createBackup;
			paramArray[5] = sharingPassword;
			Invoker.Method(this, "_ProtectSharing", paramArray);
		}

		[SupportByLibrary("XL12","XL14")]
		public void RemoveDocumentInformation(LateBindingApi.Excel.Enums.XlRemoveDocInfoType removeDocInfoType)
		{
			object[] paramArray = new object[1];
			paramArray[0] = removeDocInfoType;
			Invoker.Method(this, "RemoveDocumentInformation", paramArray);
		}

		[SupportByLibrary("XL12","XL14")]
		public void CheckInWithVersion()
		{
			Invoker.Method(this, "CheckInWithVersion", null);
		}

		[SupportByLibrary("XL12","XL14")]
		public void CheckInWithVersion(object saveChanges, object comments, object makePublic, object versionType)
		{
			object[] paramArray = new object[4];
			paramArray[0] = saveChanges;
			paramArray[1] = comments;
			paramArray[2] = makePublic;
			paramArray[3] = versionType;
			Invoker.Method(this, "CheckInWithVersion", paramArray);
		}

		[SupportByLibrary("XL12","XL14")]
		public void LockServerFile()
		{
			Invoker.Method(this, "LockServerFile", null);
		}

		[SupportByLibrary("XL12","XL14")]
		public LateBindingApi.Office.WorkflowTasks GetWorkflowTasks()
		{
			object returnValue = Invoker.MethodReturn(this, "GetWorkflowTasks", null);
			if(null == returnValue)
				return null;
			LateBindingApi.Office.WorkflowTasks newClass = new LateBindingApi.Office.WorkflowTasks(this, returnValue);
			return newClass;
		}

		[SupportByLibrary("XL12","XL14")]
		public LateBindingApi.Office.WorkflowTemplates GetWorkflowTemplates()
		{
			object returnValue = Invoker.MethodReturn(this, "GetWorkflowTemplates", null);
			if(null == returnValue)
				return null;
			LateBindingApi.Office.WorkflowTemplates newClass = new LateBindingApi.Office.WorkflowTemplates(this, returnValue);
			return newClass;
		}

		[SupportByLibrary("XL12","XL14")]
		public void ApplyTheme(string filename)
		{
			object[] paramArray = new object[1];
			paramArray[0] = filename;
			Invoker.Method(this, "ApplyTheme", paramArray);
		}

		[SupportByLibrary("XL12","XL14")]
		public void EnableConnections()
		{
			Invoker.Method(this, "EnableConnections", null);
		}

		[SupportByLibrary("XL12","XL14")]
		public void ExportAsFixedFormat(LateBindingApi.Excel.Enums.XlFixedFormatType type)
		{
			object[] paramArray = new object[1];
			paramArray[0] = type;
			Invoker.Method(this, "ExportAsFixedFormat", paramArray);
		}

		[SupportByLibrary("XL12","XL14")]
		public void ExportAsFixedFormat(LateBindingApi.Excel.Enums.XlFixedFormatType type, object filename, object quality, object includeDocProperties, object ignorePrintAreas, object from, object to, object openAfterPublish, object fixedFormatExtClassPtr)
		{
			object[] paramArray = new object[9];
			paramArray[0] = type;
			paramArray[1] = filename;
			paramArray[2] = quality;
			paramArray[3] = includeDocProperties;
			paramArray[4] = ignorePrintAreas;
			paramArray[5] = from;
			paramArray[6] = to;
			paramArray[7] = openAfterPublish;
			paramArray[8] = fixedFormatExtClassPtr;
			Invoker.Method(this, "ExportAsFixedFormat", paramArray);
		}

		#endregion

	}
}
