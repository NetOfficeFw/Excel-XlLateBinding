//Generated by LateBindingApi.CodeGenerator
using System;
using System.Reflection;
using System.ComponentModel;
using System.Runtime.InteropServices;
using LateBindingApi.Core;
namespace LateBindingApi.Excel
{
	[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
	public class _Worksheet : COMObject
	{
		#region Construction

		public _Worksheet(COMObject parentObject, object comProxy) : base(parentObject, comProxy)
		{
		}

		public _Worksheet(COMObject parentObject, object comProxy, Type comProxyType) : base(parentObject, comProxy, comProxyType)
		{
		}

		public _Worksheet(COMObject replacedObject) : base(replacedObject)
		{
		}

		public _Worksheet()
		{
		}

		#endregion

		#region Properties

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public LateBindingApi.Excel.Application Application
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "Application");
				if(null == returnValue)
					return null;
				LateBindingApi.Excel.Application newClass = new LateBindingApi.Excel.Application(this, returnValue);
				return newClass;
			}
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public LateBindingApi.Excel.Enums.XlCreator Creator
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "Creator");
				return (LateBindingApi.Excel.Enums.XlCreator)returnValue;
			}
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public COMObject Parent
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "Parent");
				COMObject returnObject = LateBindingApi.Core.Factory.CreateObjectFromComProxy(this, returnValue);
				return returnObject;
			}
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public string CodeName
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "CodeName");
				return (string)returnValue;
			}
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public string _CodeName
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "_CodeName");
				return (string)returnValue;
			}
			set
			{
				Invoker.PropertySet(this, "_CodeName", value);
			}						
		}


		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public Int32 Index
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "Index");
				return (Int32)returnValue;
			}
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public string Name
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "Name");
				return (string)returnValue;
			}
			set
			{
				Invoker.PropertySet(this, "Name", value);
			}						
		}


		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public COMObject Next
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "Next");
				COMObject returnObject = LateBindingApi.Core.Factory.CreateObjectFromComProxy(this, returnValue);
				return returnObject;
			}
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public string OnDoubleClick
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "OnDoubleClick");
				return (string)returnValue;
			}
			set
			{
				Invoker.PropertySet(this, "OnDoubleClick", value);
			}						
		}


		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public string OnSheetActivate
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "OnSheetActivate");
				return (string)returnValue;
			}
			set
			{
				Invoker.PropertySet(this, "OnSheetActivate", value);
			}						
		}


		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public string OnSheetDeactivate
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "OnSheetDeactivate");
				return (string)returnValue;
			}
			set
			{
				Invoker.PropertySet(this, "OnSheetDeactivate", value);
			}						
		}


		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public LateBindingApi.Excel.PageSetup PageSetup
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "PageSetup");
				if(null == returnValue)
					return null;
				LateBindingApi.Excel.PageSetup newClass = new LateBindingApi.Excel.PageSetup(this, returnValue);
				return newClass;
			}
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public COMObject Previous
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "Previous");
				COMObject returnObject = LateBindingApi.Core.Factory.CreateObjectFromComProxy(this, returnValue);
				return returnObject;
			}
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public bool ProtectContents
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "ProtectContents");
				return (bool)returnValue;
			}
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public bool ProtectDrawingObjects
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "ProtectDrawingObjects");
				return (bool)returnValue;
			}
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public bool ProtectionMode
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "ProtectionMode");
				return (bool)returnValue;
			}
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public bool ProtectScenarios
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "ProtectScenarios");
				return (bool)returnValue;
			}
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public LateBindingApi.Excel.Enums.XlSheetVisibility Visible
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "Visible");
				return (LateBindingApi.Excel.Enums.XlSheetVisibility)returnValue;
			}
			set
			{
				Invoker.PropertySet(this, "Visible", value);
			}						
		}


		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public LateBindingApi.Excel.Shapes Shapes
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "Shapes");
				if(null == returnValue)
					return null;
				LateBindingApi.Excel.Shapes newClass = new LateBindingApi.Excel.Shapes(this, returnValue);
				return newClass;
			}
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public bool TransitionExpEval
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "TransitionExpEval");
				return (bool)returnValue;
			}
			set
			{
				Invoker.PropertySet(this, "TransitionExpEval", value);
			}						
		}


		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public bool AutoFilterMode
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "AutoFilterMode");
				return (bool)returnValue;
			}
			set
			{
				Invoker.PropertySet(this, "AutoFilterMode", value);
			}						
		}


		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public bool EnableCalculation
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "EnableCalculation");
				return (bool)returnValue;
			}
			set
			{
				Invoker.PropertySet(this, "EnableCalculation", value);
			}						
		}


		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public LateBindingApi.Excel.Range Cells
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "Cells");
				if(null == returnValue)
					return null;
				LateBindingApi.Excel.Range newClass = new LateBindingApi.Excel.Range(this, returnValue);
				return newClass;
			}
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public LateBindingApi.Excel.Range CircularReference
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "CircularReference");
				if(null == returnValue)
					return null;
				LateBindingApi.Excel.Range newClass = new LateBindingApi.Excel.Range(this, returnValue);
				return newClass;
			}
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public LateBindingApi.Excel.Range Columns
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "Columns");
				if(null == returnValue)
					return null;
				LateBindingApi.Excel.Range newClass = new LateBindingApi.Excel.Range(this, returnValue);
				return newClass;
			}
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public LateBindingApi.Excel.Enums.XlConsolidationFunction ConsolidationFunction
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "ConsolidationFunction");
				return (LateBindingApi.Excel.Enums.XlConsolidationFunction)returnValue;
			}
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public COMVariant ConsolidationOptions
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "ConsolidationOptions");
				COMVariant returnObject = LateBindingApi.Core.Factory.CreateVariantFromComProxy(this, returnValue);
				return returnObject;
			}
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public COMVariant ConsolidationSources
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "ConsolidationSources");
				COMVariant returnObject = LateBindingApi.Core.Factory.CreateVariantFromComProxy(this, returnValue);
				return returnObject;
			}
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public bool DisplayAutomaticPageBreaks
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "DisplayAutomaticPageBreaks");
				return (bool)returnValue;
			}
			set
			{
				Invoker.PropertySet(this, "DisplayAutomaticPageBreaks", value);
			}						
		}


		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public bool EnableAutoFilter
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "EnableAutoFilter");
				return (bool)returnValue;
			}
			set
			{
				Invoker.PropertySet(this, "EnableAutoFilter", value);
			}						
		}


		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public LateBindingApi.Excel.Enums.XlEnableSelection EnableSelection
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "EnableSelection");
				return (LateBindingApi.Excel.Enums.XlEnableSelection)returnValue;
			}
			set
			{
				Invoker.PropertySet(this, "EnableSelection", value);
			}						
		}


		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public bool EnableOutlining
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "EnableOutlining");
				return (bool)returnValue;
			}
			set
			{
				Invoker.PropertySet(this, "EnableOutlining", value);
			}						
		}


		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public bool EnablePivotTable
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "EnablePivotTable");
				return (bool)returnValue;
			}
			set
			{
				Invoker.PropertySet(this, "EnablePivotTable", value);
			}						
		}


		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public bool FilterMode
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "FilterMode");
				return (bool)returnValue;
			}
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public LateBindingApi.Excel.Names Names
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "Names");
				if(null == returnValue)
					return null;
				LateBindingApi.Excel.Names newClass = new LateBindingApi.Excel.Names(this, returnValue);
				return newClass;
			}
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public string OnCalculate
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "OnCalculate");
				return (string)returnValue;
			}
			set
			{
				Invoker.PropertySet(this, "OnCalculate", value);
			}						
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public string OnData
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "OnData");
				return (string)returnValue;
			}
			set
			{
				Invoker.PropertySet(this, "OnData", value);
			}						
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public string OnEntry
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "OnEntry");
				return (string)returnValue;
			}
			set
			{
				Invoker.PropertySet(this, "OnEntry", value);
			}						
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public LateBindingApi.Excel.Outline Outline
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "Outline");
				if(null == returnValue)
					return null;
				LateBindingApi.Excel.Outline newClass = new LateBindingApi.Excel.Outline(this, returnValue);
				return newClass;
			}
		}

        [SupportByLibrary("XL10", "XL11", "XL12", "XL14", "XL9")]
        public LateBindingApi.Excel.Range Range
        {
            get
			{
                object returnValue = Invoker.PropertyGet(this, "Range", null);
                if (null == returnValue)
                    return null;
                LateBindingApi.Excel.Range newClass = new LateBindingApi.Excel.Range(this, returnValue);
                return newClass;
            }
        }

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public LateBindingApi.Excel.Range get_Range(object cell1)
		{
			object[] paramArray = new object[1];
			paramArray[0] = cell1;
			object returnValue = Invoker.PropertyGet(this, "Range", paramArray);
			if(null == returnValue)
				return null;
			LateBindingApi.Excel.Range newClass = new LateBindingApi.Excel.Range(this, returnValue);
			return newClass;
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public LateBindingApi.Excel.Range get_Range(object cell1, object cell2)
		{
			object[] paramArray = new object[2];
			paramArray[0] = cell1;
			paramArray[1] = cell2;
			object returnValue = Invoker.PropertyGet(this, "Range", paramArray);
			if(null == returnValue)
				return null;
			LateBindingApi.Excel.Range newClass = new LateBindingApi.Excel.Range(this, returnValue);
			return newClass;
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public LateBindingApi.Excel.Range Rows
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "Rows");
				if(null == returnValue)
					return null;
				LateBindingApi.Excel.Range newClass = new LateBindingApi.Excel.Range(this, returnValue);
				return newClass;
			}
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public string ScrollArea
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "ScrollArea");
				return (string)returnValue;
			}
			set
			{
				Invoker.PropertySet(this, "ScrollArea", value);
			}						
		}


		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public Double StandardHeight
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "StandardHeight");
				return (Double)returnValue;
			}
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public Double StandardWidth
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "StandardWidth");
				return (Double)returnValue;
			}
			set
			{
				Invoker.PropertySet(this, "StandardWidth", value);
			}						
		}


		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public bool TransitionFormEntry
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "TransitionFormEntry");
				return (bool)returnValue;
			}
			set
			{
				Invoker.PropertySet(this, "TransitionFormEntry", value);
			}						
		}


		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public LateBindingApi.Excel.Enums.XlSheetType Type
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "Type");
				return (LateBindingApi.Excel.Enums.XlSheetType)returnValue;
			}
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public LateBindingApi.Excel.Range UsedRange
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "UsedRange");
				if(null == returnValue)
					return null;
				LateBindingApi.Excel.Range newClass = new LateBindingApi.Excel.Range(this, returnValue);
				return newClass;
			}
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public LateBindingApi.Excel.HPageBreaks HPageBreaks
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "HPageBreaks");
				if(null == returnValue)
					return null;
				LateBindingApi.Excel.HPageBreaks newClass = new LateBindingApi.Excel.HPageBreaks(this, returnValue);
				return newClass;
			}
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public LateBindingApi.Excel.VPageBreaks VPageBreaks
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "VPageBreaks");
				if(null == returnValue)
					return null;
				LateBindingApi.Excel.VPageBreaks newClass = new LateBindingApi.Excel.VPageBreaks(this, returnValue);
				return newClass;
			}
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public LateBindingApi.Excel.QueryTables QueryTables
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "QueryTables");
				if(null == returnValue)
					return null;
				LateBindingApi.Excel.QueryTables newClass = new LateBindingApi.Excel.QueryTables(this, returnValue);
				return newClass;
			}
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public bool DisplayPageBreaks
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "DisplayPageBreaks");
				return (bool)returnValue;
			}
			set
			{
				Invoker.PropertySet(this, "DisplayPageBreaks", value);
			}						
		}


		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public LateBindingApi.Excel.Comments Comments
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "Comments");
				if(null == returnValue)
					return null;
				LateBindingApi.Excel.Comments newClass = new LateBindingApi.Excel.Comments(this, returnValue);
				return newClass;
			}
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public LateBindingApi.Excel.Hyperlinks Hyperlinks
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "Hyperlinks");
				if(null == returnValue)
					return null;
				LateBindingApi.Excel.Hyperlinks newClass = new LateBindingApi.Excel.Hyperlinks(this, returnValue);
				return newClass;
			}
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public Int32 _DisplayRightToLeft
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "_DisplayRightToLeft");
				return (Int32)returnValue;
			}
			set
			{
				Invoker.PropertySet(this, "_DisplayRightToLeft", value);
			}						
		}


		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public LateBindingApi.Excel.AutoFilter AutoFilter
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "AutoFilter");
				if(null == returnValue)
					return null;
				LateBindingApi.Excel.AutoFilter newClass = new LateBindingApi.Excel.AutoFilter(this, returnValue);
				return newClass;
			}
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public bool DisplayRightToLeft
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "DisplayRightToLeft");
				return (bool)returnValue;
			}
			set
			{
				Invoker.PropertySet(this, "DisplayRightToLeft", value);
			}						
		}


		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public LateBindingApi.Office.Scripts Scripts
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "Scripts");
				if(null == returnValue)
					return null;
				LateBindingApi.Office.Scripts newClass = new LateBindingApi.Office.Scripts(this, returnValue);
				return newClass;
			}
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14")]
		public LateBindingApi.Excel.Tab Tab
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "Tab");
				if(null == returnValue)
					return null;
				LateBindingApi.Excel.Tab newClass = new LateBindingApi.Excel.Tab(this, returnValue);
				return newClass;
			}
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14")]
		public LateBindingApi.Office.MsoEnvelope MailEnvelope
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "MailEnvelope");
				if(null == returnValue)
					return null;
				LateBindingApi.Office.MsoEnvelope newClass = new LateBindingApi.Office.MsoEnvelope(this, returnValue);
				return newClass;
			}
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14")]
		public LateBindingApi.Excel.CustomProperties CustomProperties
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "CustomProperties");
				if(null == returnValue)
					return null;
				LateBindingApi.Excel.CustomProperties newClass = new LateBindingApi.Excel.CustomProperties(this, returnValue);
				return newClass;
			}
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14")]
		public LateBindingApi.Excel.SmartTags SmartTags
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "SmartTags");
				if(null == returnValue)
					return null;
				LateBindingApi.Excel.SmartTags newClass = new LateBindingApi.Excel.SmartTags(this, returnValue);
				return newClass;
			}
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14")]
		public LateBindingApi.Excel.Protection Protection
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "Protection");
				if(null == returnValue)
					return null;
				LateBindingApi.Excel.Protection newClass = new LateBindingApi.Excel.Protection(this, returnValue);
				return newClass;
			}
		}

		[SupportByLibrary("XL11","XL12","XL14")]
		public LateBindingApi.Excel.ListObjects ListObjects
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "ListObjects");
				if(null == returnValue)
					return null;
				LateBindingApi.Excel.ListObjects newClass = new LateBindingApi.Excel.ListObjects(this, returnValue);
				return newClass;
			}
		}

		[SupportByLibrary("XL12","XL14")]
		public bool EnableFormatConditionsCalculation
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "EnableFormatConditionsCalculation");
				return (bool)returnValue;
			}
			set
			{
				Invoker.PropertySet(this, "EnableFormatConditionsCalculation", value);
			}						
		}


		[SupportByLibrary("XL12","XL14")]
		public LateBindingApi.Excel.Sort Sort
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "Sort");
				if(null == returnValue)
					return null;
				LateBindingApi.Excel.Sort newClass = new LateBindingApi.Excel.Sort(this, returnValue);
				return newClass;
			}
		}

		[SupportByLibrary("XL14")]
		public Int32 PrintedCommentPages
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "PrintedCommentPages");
				return (Int32)returnValue;
			}
		}

		#endregion

		#region Methods

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public void Activate()
		{
			Invoker.Method(this, "Activate", null);
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public void Copy()
		{
			Invoker.Method(this, "Copy", null);
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public void Copy(object before, object after)
		{
			object[] paramArray = new object[2];
			paramArray[0] = before;
			paramArray[1] = after;
			Invoker.Method(this, "Copy", paramArray);
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public void Delete()
		{
			Invoker.Method(this, "Delete", null);
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public void Move()
		{
			Invoker.Method(this, "Move", null);
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public void Move(object before, object after)
		{
			object[] paramArray = new object[2];
			paramArray[0] = before;
			paramArray[1] = after;
			Invoker.Method(this, "Move", paramArray);
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public void _PrintOut()
		{
			Invoker.Method(this, "_PrintOut", null);
		}

		[SupportByLibrary("XL10","XL11","XL9")]
		public void _PrintOut(object from, object to, object copies, object preview, object activePrinter, object printToFile, object collate)
		{
			object[] paramArray = new object[7];
			paramArray[0] = from;
			paramArray[1] = to;
			paramArray[2] = copies;
			paramArray[3] = preview;
			paramArray[4] = activePrinter;
			paramArray[5] = printToFile;
			paramArray[6] = collate;
			Invoker.Method(this, "_PrintOut", paramArray);
		}

		[SupportByLibrary("XL12","XL14")]
		public void _PrintOut(object from, object to, object copies, object preview, object activePrinter, object printToFile, object collate, object prToFileName)
		{
			object[] paramArray = new object[8];
			paramArray[0] = from;
			paramArray[1] = to;
			paramArray[2] = copies;
			paramArray[3] = preview;
			paramArray[4] = activePrinter;
			paramArray[5] = printToFile;
			paramArray[6] = collate;
			paramArray[7] = prToFileName;
			Invoker.Method(this, "_PrintOut", paramArray);
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public void PrintPreview()
		{
			Invoker.Method(this, "PrintPreview", null);
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public void PrintPreview(object enableChanges)
		{
			object[] paramArray = new object[1];
			paramArray[0] = enableChanges;
			Invoker.Method(this, "PrintPreview", paramArray);
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public void Protect()
		{
			Invoker.Method(this, "Protect", null);
		}

		[SupportByLibrary("XL9")]
		public void Protect(object password, object drawingObjects, object contents, object scenarios, object userInterfaceOnly)
		{
			object[] paramArray = new object[5];
			paramArray[0] = password;
			paramArray[1] = drawingObjects;
			paramArray[2] = contents;
			paramArray[3] = scenarios;
			paramArray[4] = userInterfaceOnly;
			Invoker.Method(this, "Protect", paramArray);
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14")]
		public void Protect(object password, object drawingObjects, object contents, object scenarios, object userInterfaceOnly, object allowFormattingCells, object allowFormattingColumns, object allowFormattingRows, object allowInsertingColumns, object allowInsertingRows, object allowInsertingHyperlinks, object allowDeletingColumns, object allowDeletingRows, object allowSorting, object allowFiltering, object allowUsingPivotTables)
		{
			object[] paramArray = new object[16];
			paramArray[0] = password;
			paramArray[1] = drawingObjects;
			paramArray[2] = contents;
			paramArray[3] = scenarios;
			paramArray[4] = userInterfaceOnly;
			paramArray[5] = allowFormattingCells;
			paramArray[6] = allowFormattingColumns;
			paramArray[7] = allowFormattingRows;
			paramArray[8] = allowInsertingColumns;
			paramArray[9] = allowInsertingRows;
			paramArray[10] = allowInsertingHyperlinks;
			paramArray[11] = allowDeletingColumns;
			paramArray[12] = allowDeletingRows;
			paramArray[13] = allowSorting;
			paramArray[14] = allowFiltering;
			paramArray[15] = allowUsingPivotTables;
			Invoker.Method(this, "Protect", paramArray);
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public void SaveAs(string filename)
		{
			object[] paramArray = new object[1];
			paramArray[0] = filename;
			Invoker.Method(this, "SaveAs", paramArray);
		}

		[SupportByLibrary("XL9")]
		public void SaveAs(string filename, object fileFormat, object password, object writeResPassword, object readOnlyRecommended, object createBackup, object addToMru, object textCodepage, object textVisualLayout)
		{
			object[] paramArray = new object[9];
			paramArray[0] = filename;
			paramArray[1] = fileFormat;
			paramArray[2] = password;
			paramArray[3] = writeResPassword;
			paramArray[4] = readOnlyRecommended;
			paramArray[5] = createBackup;
			paramArray[6] = addToMru;
			paramArray[7] = textCodepage;
			paramArray[8] = textVisualLayout;
			Invoker.Method(this, "SaveAs", paramArray);
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14")]
		public void SaveAs(string filename, object fileFormat, object password, object writeResPassword, object readOnlyRecommended, object createBackup, object addToMru, object textCodepage, object textVisualLayout, object local)
		{
			object[] paramArray = new object[10];
			paramArray[0] = filename;
			paramArray[1] = fileFormat;
			paramArray[2] = password;
			paramArray[3] = writeResPassword;
			paramArray[4] = readOnlyRecommended;
			paramArray[5] = createBackup;
			paramArray[6] = addToMru;
			paramArray[7] = textCodepage;
			paramArray[8] = textVisualLayout;
			paramArray[9] = local;
			Invoker.Method(this, "SaveAs", paramArray);
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public void Select()
		{
			Invoker.Method(this, "Select", null);
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public void Select(object replace)
		{
			object[] paramArray = new object[1];
			paramArray[0] = replace;
			Invoker.Method(this, "Select", paramArray);
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public void Unprotect()
		{
			Invoker.Method(this, "Unprotect", null);
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public void Unprotect(object password)
		{
			object[] paramArray = new object[1];
			paramArray[0] = password;
			Invoker.Method(this, "Unprotect", paramArray);
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public LateBindingApi.Excel.Arc Arcs()
		{
			object returnValue = Invoker.MethodReturn(this, "Arcs", null);
			if(null == returnValue)
				return null;
			LateBindingApi.Excel.Arc newClass = new LateBindingApi.Excel.Arc(this, returnValue);
			return newClass;
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public LateBindingApi.Excel.Arcs Arcs(object index)
		{
			object[] paramArray = new object[1];
			paramArray[0] = index;
			object returnValue = Invoker.MethodReturn(this, "Arcs", paramArray);
			if(null == returnValue)
				return null;
			LateBindingApi.Excel.Arcs newClass = new LateBindingApi.Excel.Arcs(this, returnValue);
			return newClass;
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public void SetBackgroundPicture(string filename)
		{
			object[] paramArray = new object[1];
			paramArray[0] = filename;
			Invoker.Method(this, "SetBackgroundPicture", paramArray);
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public LateBindingApi.Excel.Buttons Buttons()
		{
			object returnValue = Invoker.MethodReturn(this, "Buttons", null);
			if(null == returnValue)
				return null;
			LateBindingApi.Excel.Buttons newClass = new LateBindingApi.Excel.Buttons(this, returnValue);
			return newClass;
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public LateBindingApi.Excel.Button Buttons(object index)
		{
			object[] paramArray = new object[1];
			paramArray[0] = index;
			object returnValue = Invoker.MethodReturn(this, "Buttons", paramArray);
			if(null == returnValue)
				return null;
			LateBindingApi.Excel.Button newClass = new LateBindingApi.Excel.Button(this, returnValue);
			return newClass;
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public void Calculate()
		{
			Invoker.Method(this, "Calculate", null);
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public LateBindingApi.Excel.ChartObjects ChartObjects()
		{
			object returnValue = Invoker.MethodReturn(this, "ChartObjects", null);
			if(null == returnValue)
				return null;
			LateBindingApi.Excel.ChartObjects newClass = new LateBindingApi.Excel.ChartObjects(this, returnValue);
			return newClass;
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public LateBindingApi.Excel.ChartObject ChartObjects(object index)
		{
			object[] paramArray = new object[1];
			paramArray[0] = index;
			object returnValue = Invoker.MethodReturn(this, "ChartObjects", paramArray);
			if(null == returnValue)
				return null;
			LateBindingApi.Excel.ChartObject newClass = new LateBindingApi.Excel.ChartObject(this, returnValue);
			return newClass;
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public LateBindingApi.Excel.CheckBoxes CheckBoxes()
		{
			object returnValue = Invoker.MethodReturn(this, "CheckBoxes", null);
			if(null == returnValue)
				return null;
			LateBindingApi.Excel.CheckBoxes newClass = new LateBindingApi.Excel.CheckBoxes(this, returnValue);
			return newClass;
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public LateBindingApi.Excel.CheckBox CheckBoxes(object index)
		{
			object[] paramArray = new object[1];
			paramArray[0] = index;
			object returnValue = Invoker.MethodReturn(this, "CheckBoxes", paramArray);
			if(null == returnValue)
				return null;
			LateBindingApi.Excel.CheckBox newClass = new LateBindingApi.Excel.CheckBox(this, returnValue);
			return newClass;
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public void CheckSpelling()
		{
			Invoker.Method(this, "CheckSpelling", null);
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public void CheckSpelling(object customDictionary, object ignoreUppercase, object alwaysSuggest, object spellLang)
		{
			object[] paramArray = new object[4];
			paramArray[0] = customDictionary;
			paramArray[1] = ignoreUppercase;
			paramArray[2] = alwaysSuggest;
			paramArray[3] = spellLang;
			Invoker.Method(this, "CheckSpelling", paramArray);
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public void ClearArrows()
		{
			Invoker.Method(this, "ClearArrows", null);
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public LateBindingApi.Excel.Drawings Drawings()
		{
			object returnValue = Invoker.MethodReturn(this, "Drawings", null);
			if(null == returnValue)
				return null;
			LateBindingApi.Excel.Drawings newClass = new LateBindingApi.Excel.Drawings(this, returnValue);
			return newClass;
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public LateBindingApi.Excel.Drawing Drawings(object index)
		{
			object[] paramArray = new object[1];
			paramArray[0] = index;
			object returnValue = Invoker.MethodReturn(this, "Drawings", paramArray);
			if(null == returnValue)
				return null;
			LateBindingApi.Excel.Drawing newClass = new LateBindingApi.Excel.Drawing(this, returnValue);
			return newClass;
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public COMObject DrawingObjects()
		{
			object returnValue = Invoker.MethodReturn(this, "DrawingObjects", null);
			COMObject returnObject = LateBindingApi.Core.Factory.CreateObjectFromComProxy(this, returnValue);
			return returnObject;
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public COMObject DrawingObjects(object index)
		{
			object[] paramArray = new object[1];
			paramArray[0] = index;
			object returnValue = Invoker.MethodReturn(this, "DrawingObjects", paramArray);
			COMObject returnObject = LateBindingApi.Core.Factory.CreateObjectFromComProxy(this, returnValue);
			return returnObject;
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public LateBindingApi.Excel.DropDowns DropDowns()
		{
			object returnValue = Invoker.MethodReturn(this, "DropDowns", null);
			if(null == returnValue)
				return null;
			LateBindingApi.Excel.DropDowns newClass = new LateBindingApi.Excel.DropDowns(this, returnValue);
			return newClass;
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public LateBindingApi.Excel.DropDown DropDowns(object index)
		{
			object[] paramArray = new object[1];
			paramArray[0] = index;
			object returnValue = Invoker.MethodReturn(this, "DropDowns", paramArray);
			if(null == returnValue)
				return null;
			LateBindingApi.Excel.DropDown newClass = new LateBindingApi.Excel.DropDown(this, returnValue);
			return newClass;
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public COMVariant Evaluate(object name)
		{
			object[] paramArray = new object[1];
			paramArray[0] = name;
			object returnValue = Invoker.MethodReturn(this, "Evaluate", paramArray);
			COMVariant returnObject = LateBindingApi.Core.Factory.CreateVariantFromComProxy(this, returnValue);
			return returnObject;
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public COMVariant _Evaluate(object name)
		{
			object[] paramArray = new object[1];
			paramArray[0] = name;
			object returnValue = Invoker.MethodReturn(this, "_Evaluate", paramArray);
			COMVariant returnObject = LateBindingApi.Core.Factory.CreateVariantFromComProxy(this, returnValue);
			return returnObject;
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public void ResetAllPageBreaks()
		{
			Invoker.Method(this, "ResetAllPageBreaks", null);
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public LateBindingApi.Excel.GroupBoxes GroupBoxes()
		{
			object returnValue = Invoker.MethodReturn(this, "GroupBoxes", null);
			if(null == returnValue)
				return null;
			LateBindingApi.Excel.GroupBoxes newClass = new LateBindingApi.Excel.GroupBoxes(this, returnValue);
			return newClass;
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public LateBindingApi.Excel.GroupBox GroupBoxes(object index)
		{
			object[] paramArray = new object[1];
			paramArray[0] = index;
			object returnValue = Invoker.MethodReturn(this, "GroupBoxes", paramArray);
			if(null == returnValue)
				return null;
			LateBindingApi.Excel.GroupBox newClass = new LateBindingApi.Excel.GroupBox(this, returnValue);
			return newClass;
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public LateBindingApi.Excel.GroupObjects GroupObjects()
		{
			object returnValue = Invoker.MethodReturn(this, "GroupObjects", null);
			if(null == returnValue)
				return null;
			LateBindingApi.Excel.GroupObjects newClass = new LateBindingApi.Excel.GroupObjects(this, returnValue);
			return newClass;
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public LateBindingApi.Excel.GroupObject GroupObjects(object index)
		{
			object[] paramArray = new object[1];
			paramArray[0] = index;
			object returnValue = Invoker.MethodReturn(this, "GroupObjects", paramArray);
			if(null == returnValue)
				return null;
			LateBindingApi.Excel.GroupObject newClass = new LateBindingApi.Excel.GroupObject(this, returnValue);
			return newClass;
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public LateBindingApi.Excel.Labels Labels()
		{
			object returnValue = Invoker.MethodReturn(this, "Labels", null);
			if(null == returnValue)
				return null;
			LateBindingApi.Excel.Labels newClass = new LateBindingApi.Excel.Labels(this, returnValue);
			return newClass;
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public LateBindingApi.Excel.Label Labels(object index)
		{
			object[] paramArray = new object[1];
			paramArray[0] = index;
			object returnValue = Invoker.MethodReturn(this, "Labels", paramArray);
			if(null == returnValue)
				return null;
			LateBindingApi.Excel.Label newClass = new LateBindingApi.Excel.Label(this, returnValue);
			return newClass;
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public LateBindingApi.Excel.Lines Lines()
		{
			object returnValue = Invoker.MethodReturn(this, "Lines", null);
			if(null == returnValue)
				return null;
			LateBindingApi.Excel.Lines newClass = new LateBindingApi.Excel.Lines(this, returnValue);
			return newClass;
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public LateBindingApi.Excel.Line Lines(object index)
		{
			object[] paramArray = new object[1];
			paramArray[0] = index;
			object returnValue = Invoker.MethodReturn(this, "Lines", paramArray);
			if(null == returnValue)
				return null;
			LateBindingApi.Excel.Line newClass = new LateBindingApi.Excel.Line(this, returnValue);
			return newClass;
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public COMObject ListBoxes()
		{
			object returnValue = Invoker.MethodReturn(this, "ListBoxes", null);
			COMObject returnObject = LateBindingApi.Core.Factory.CreateObjectFromComProxy(this, returnValue);
			return returnObject;
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public LateBindingApi.Excel.ListBox ListBoxes(object index)
		{
			object[] paramArray = new object[1];
			paramArray[0] = index;
			object returnValue = Invoker.MethodReturn(this, "ListBoxes", paramArray);
			if(null == returnValue)
				return null;
			LateBindingApi.Excel.ListBox newClass = new LateBindingApi.Excel.ListBox(this, returnValue);
			return newClass;
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public LateBindingApi.Excel.OLEObjects OLEObjects()
		{
			object returnValue = Invoker.MethodReturn(this, "OLEObjects", null);
			if(null == returnValue)
				return null;
			LateBindingApi.Excel.OLEObjects newClass = new LateBindingApi.Excel.OLEObjects(this, returnValue);
			return newClass;
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public LateBindingApi.Excel.OLEObject OLEObjects(object index)
		{
			object[] paramArray = new object[1];
			paramArray[0] = index;
			object returnValue = Invoker.MethodReturn(this, "OLEObjects", paramArray);
			if(null == returnValue)
				return null;
			LateBindingApi.Excel.OLEObject newClass = new LateBindingApi.Excel.OLEObject(this, returnValue);
			return newClass;
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public LateBindingApi.Excel.OptionButtons OptionButtons()
		{
			object returnValue = Invoker.MethodReturn(this, "OptionButtons", null);
			if(null == returnValue)
				return null;
			LateBindingApi.Excel.OptionButtons newClass = new LateBindingApi.Excel.OptionButtons(this, returnValue);
			return newClass;
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public LateBindingApi.Excel.OptionButton OptionButtons(object index)
		{
			object[] paramArray = new object[1];
			paramArray[0] = index;
			object returnValue = Invoker.MethodReturn(this, "OptionButtons", paramArray);
			if(null == returnValue)
				return null;
			LateBindingApi.Excel.OptionButton newClass = new LateBindingApi.Excel.OptionButton(this, returnValue);
			return newClass;
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public LateBindingApi.Excel.Ovals Ovals()
		{
			object returnValue = Invoker.MethodReturn(this, "Ovals", null);
			if(null == returnValue)
				return null;
			LateBindingApi.Excel.Ovals newClass = new LateBindingApi.Excel.Ovals(this, returnValue);
			return newClass;
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public LateBindingApi.Excel.Oval Ovals(object index)
		{
			object[] paramArray = new object[1];
			paramArray[0] = index;
			object returnValue = Invoker.MethodReturn(this, "Ovals", paramArray);
			if(null == returnValue)
				return null;
			LateBindingApi.Excel.Oval newClass = new LateBindingApi.Excel.Oval(this, returnValue);
			return newClass;
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public void Paste()
		{
			Invoker.Method(this, "Paste", null);
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public void Paste(object destination, object link)
		{
			object[] paramArray = new object[2];
			paramArray[0] = destination;
			paramArray[1] = link;
			Invoker.Method(this, "Paste", paramArray);
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public void PasteSpecial()
		{
			Invoker.Method(this, "PasteSpecial", null);
		}

		[SupportByLibrary("XL9")]
		public void PasteSpecial(object format, object link, object displayAsIcon, object iconFileName, object iconIndex, object iconLabel)
		{
			object[] paramArray = new object[6];
			paramArray[0] = format;
			paramArray[1] = link;
			paramArray[2] = displayAsIcon;
			paramArray[3] = iconFileName;
			paramArray[4] = iconIndex;
			paramArray[5] = iconLabel;
			Invoker.Method(this, "PasteSpecial", paramArray);
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14")]
		public void PasteSpecial(object format, object link, object displayAsIcon, object iconFileName, object iconIndex, object iconLabel, object noHTMLFormatting)
		{
			object[] paramArray = new object[7];
			paramArray[0] = format;
			paramArray[1] = link;
			paramArray[2] = displayAsIcon;
			paramArray[3] = iconFileName;
			paramArray[4] = iconIndex;
			paramArray[5] = iconLabel;
			paramArray[6] = noHTMLFormatting;
			Invoker.Method(this, "PasteSpecial", paramArray);
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public LateBindingApi.Excel.Pictures Pictures()
		{
			object returnValue = Invoker.MethodReturn(this, "Pictures", null);
			if(null == returnValue)
				return null;
			LateBindingApi.Excel.Pictures newClass = new LateBindingApi.Excel.Pictures(this, returnValue);
			return newClass;
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public LateBindingApi.Excel.Picture Pictures(object index)
		{
			object[] paramArray = new object[1];
			paramArray[0] = index;
			object returnValue = Invoker.MethodReturn(this, "Pictures", paramArray);
			if(null == returnValue)
				return null;
			LateBindingApi.Excel.Picture newClass = new LateBindingApi.Excel.Picture(this, returnValue);
			return newClass;
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public LateBindingApi.Excel.PivotTables PivotTables()
		{
			object returnValue = Invoker.MethodReturn(this, "PivotTables", null);
			if(null == returnValue)
				return null;
			LateBindingApi.Excel.PivotTables newClass = new LateBindingApi.Excel.PivotTables(this, returnValue);
			return newClass;
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public LateBindingApi.Excel.PivotTable PivotTables(object index)
		{
			object[] paramArray = new object[1];
			paramArray[0] = index;
			object returnValue = Invoker.MethodReturn(this, "PivotTables", paramArray);
			if(null == returnValue)
				return null;
			LateBindingApi.Excel.PivotTable newClass = new LateBindingApi.Excel.PivotTable(this, returnValue);
			return newClass;
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public LateBindingApi.Excel.PivotTable PivotTableWizard()
		{
			object returnValue = Invoker.MethodReturn(this, "PivotTableWizard", null);
			if(null == returnValue)
				return null;
			LateBindingApi.Excel.PivotTable newClass = new LateBindingApi.Excel.PivotTable(this, returnValue);
			return newClass;
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public LateBindingApi.Excel.PivotTable PivotTableWizard(object sourceType, object sourceData, object tableDestination, object tableName, object rowGrand, object columnGrand, object saveData, object hasAutoFormat, object autoPage, object reserved, object backgroundQuery, object optimizeCache, object pageFieldOrder, object pageFieldWrapCount, object readData, object connection)
		{
			object[] paramArray = new object[16];
			paramArray[0] = sourceType;
			paramArray[1] = sourceData;
			paramArray[2] = tableDestination;
			paramArray[3] = tableName;
			paramArray[4] = rowGrand;
			paramArray[5] = columnGrand;
			paramArray[6] = saveData;
			paramArray[7] = hasAutoFormat;
			paramArray[8] = autoPage;
			paramArray[9] = reserved;
			paramArray[10] = backgroundQuery;
			paramArray[11] = optimizeCache;
			paramArray[12] = pageFieldOrder;
			paramArray[13] = pageFieldWrapCount;
			paramArray[14] = readData;
			paramArray[15] = connection;
			object returnValue = Invoker.MethodReturn(this, "PivotTableWizard", paramArray);
			if(null == returnValue)
				return null;
			LateBindingApi.Excel.PivotTable newClass = new LateBindingApi.Excel.PivotTable(this, returnValue);
			return newClass;
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public LateBindingApi.Excel.Rectangles Rectangles()
		{
			object returnValue = Invoker.MethodReturn(this, "Rectangles", null);
			if(null == returnValue)
				return null;
			LateBindingApi.Excel.Rectangles newClass = new LateBindingApi.Excel.Rectangles(this, returnValue);
			return newClass;
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public LateBindingApi.Excel.Rectangle Rectangles(object index)
		{
			object[] paramArray = new object[1];
			paramArray[0] = index;
			object returnValue = Invoker.MethodReturn(this, "Rectangles", paramArray);
			if(null == returnValue)
				return null;
			LateBindingApi.Excel.Rectangle newClass = new LateBindingApi.Excel.Rectangle(this, returnValue);
			return newClass;
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public LateBindingApi.Excel.Scenarios Scenarios()
		{
			object returnValue = Invoker.MethodReturn(this, "Scenarios", null);
			if(null == returnValue)
				return null;
			LateBindingApi.Excel.Scenarios newClass = new LateBindingApi.Excel.Scenarios(this, returnValue);
			return newClass;
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public LateBindingApi.Excel.Scenario Scenarios(object index)
		{
			object[] paramArray = new object[1];
			paramArray[0] = index;
			object returnValue = Invoker.MethodReturn(this, "Scenarios", paramArray);
			if(null == returnValue)
				return null;
			LateBindingApi.Excel.Scenario newClass = new LateBindingApi.Excel.Scenario(this, returnValue);
			return newClass;
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public LateBindingApi.Excel.ScrollBars ScrollBars()
		{
			object returnValue = Invoker.MethodReturn(this, "ScrollBars", null);
			if(null == returnValue)
				return null;
			LateBindingApi.Excel.ScrollBars newClass = new LateBindingApi.Excel.ScrollBars(this, returnValue);
			return newClass;
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public LateBindingApi.Excel.ScrollBar ScrollBars(object index)
		{
			object[] paramArray = new object[1];
			paramArray[0] = index;
			object returnValue = Invoker.MethodReturn(this, "ScrollBars", paramArray);
			if(null == returnValue)
				return null;
			LateBindingApi.Excel.ScrollBar newClass = new LateBindingApi.Excel.ScrollBar(this, returnValue);
			return newClass;
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public void ShowAllData()
		{
			Invoker.Method(this, "ShowAllData", null);
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public void ShowDataForm()
		{
			Invoker.Method(this, "ShowDataForm", null);
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public LateBindingApi.Excel.Spinners Spinners()
		{
			object returnValue = Invoker.MethodReturn(this, "Spinners", null);
			if(null == returnValue)
				return null;
			LateBindingApi.Excel.Spinners newClass = new LateBindingApi.Excel.Spinners(this, returnValue);
			return newClass;
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public LateBindingApi.Excel.Spinner Spinners(object index)
		{
			object[] paramArray = new object[1];
			paramArray[0] = index;
			object returnValue = Invoker.MethodReturn(this, "Spinners", paramArray);
			if(null == returnValue)
				return null;
			LateBindingApi.Excel.Spinner newClass = new LateBindingApi.Excel.Spinner(this, returnValue);
			return newClass;
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public LateBindingApi.Excel.TextBoxes TextBoxes()
		{
			object returnValue = Invoker.MethodReturn(this, "TextBoxes", null);
			if(null == returnValue)
				return null;
			LateBindingApi.Excel.TextBoxes newClass = new LateBindingApi.Excel.TextBoxes(this, returnValue);
			return newClass;
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public LateBindingApi.Excel.TextBox TextBoxes(object index)
		{
			object[] paramArray = new object[1];
			paramArray[0] = index;
			object returnValue = Invoker.MethodReturn(this, "TextBoxes", paramArray);
			if(null == returnValue)
				return null;
			LateBindingApi.Excel.TextBox newClass = new LateBindingApi.Excel.TextBox(this, returnValue);
			return newClass;
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public void ClearCircles()
		{
			Invoker.Method(this, "ClearCircles", null);
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public void CircleInvalid()
		{
			Invoker.Method(this, "CircleInvalid", null);
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public void PrintOut()
		{
			Invoker.Method(this, "PrintOut", null);
		}

		[SupportByLibrary("XL10","XL11","XL9")]
		public void PrintOut(object from, object to, object copies, object preview, object activePrinter, object printToFile, object collate, object prToFileName)
		{
			object[] paramArray = new object[8];
			paramArray[0] = from;
			paramArray[1] = to;
			paramArray[2] = copies;
			paramArray[3] = preview;
			paramArray[4] = activePrinter;
			paramArray[5] = printToFile;
			paramArray[6] = collate;
			paramArray[7] = prToFileName;
			Invoker.Method(this, "PrintOut", paramArray);
		}

		[SupportByLibrary("XL12","XL14")]
		public void PrintOut(object from, object to, object copies, object preview, object activePrinter, object printToFile, object collate, object prToFileName, object ignorePrintAreas)
		{
			object[] paramArray = new object[9];
			paramArray[0] = from;
			paramArray[1] = to;
			paramArray[2] = copies;
			paramArray[3] = preview;
			paramArray[4] = activePrinter;
			paramArray[5] = printToFile;
			paramArray[6] = collate;
			paramArray[7] = prToFileName;
			paramArray[8] = ignorePrintAreas;
			Invoker.Method(this, "PrintOut", paramArray);
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public void _CheckSpelling()
		{
			Invoker.Method(this, "_CheckSpelling", null);
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14","XL9")]
		public void _CheckSpelling(object customDictionary, object ignoreUppercase, object alwaysSuggest, object spellLang, object ignoreFinalYaa, object spellScript)
		{
			object[] paramArray = new object[6];
			paramArray[0] = customDictionary;
			paramArray[1] = ignoreUppercase;
			paramArray[2] = alwaysSuggest;
			paramArray[3] = spellLang;
			paramArray[4] = ignoreFinalYaa;
			paramArray[5] = spellScript;
			Invoker.Method(this, "_CheckSpelling", paramArray);
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14")]
		public void _Protect()
		{
			Invoker.Method(this, "_Protect", null);
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14")]
		public void _Protect(object password, object drawingObjects, object contents, object scenarios, object userInterfaceOnly)
		{
			object[] paramArray = new object[5];
			paramArray[0] = password;
			paramArray[1] = drawingObjects;
			paramArray[2] = contents;
			paramArray[3] = scenarios;
			paramArray[4] = userInterfaceOnly;
			Invoker.Method(this, "_Protect", paramArray);
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14")]
		public void _SaveAs(string filename)
		{
			object[] paramArray = new object[1];
			paramArray[0] = filename;
			Invoker.Method(this, "_SaveAs", paramArray);
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14")]
		public void _SaveAs(string filename, object fileFormat, object password, object writeResPassword, object readOnlyRecommended, object createBackup, object addToMru, object textCodepage, object textVisualLayout)
		{
			object[] paramArray = new object[9];
			paramArray[0] = filename;
			paramArray[1] = fileFormat;
			paramArray[2] = password;
			paramArray[3] = writeResPassword;
			paramArray[4] = readOnlyRecommended;
			paramArray[5] = createBackup;
			paramArray[6] = addToMru;
			paramArray[7] = textCodepage;
			paramArray[8] = textVisualLayout;
			Invoker.Method(this, "_SaveAs", paramArray);
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14")]
		public void _PasteSpecial()
		{
			Invoker.Method(this, "_PasteSpecial", null);
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14")]
		public void _PasteSpecial(object format, object link, object displayAsIcon, object iconFileName, object iconIndex, object iconLabel)
		{
			object[] paramArray = new object[6];
			paramArray[0] = format;
			paramArray[1] = link;
			paramArray[2] = displayAsIcon;
			paramArray[3] = iconFileName;
			paramArray[4] = iconIndex;
			paramArray[5] = iconLabel;
			Invoker.Method(this, "_PasteSpecial", paramArray);
		}

		[SupportByLibrary("XL11","XL12","XL14")]
		public LateBindingApi.Excel.Range XmlDataQuery(string xPath)
		{
			object[] paramArray = new object[1];
			paramArray[0] = xPath;
			object returnValue = Invoker.MethodReturn(this, "XmlDataQuery", paramArray);
			if(null == returnValue)
				return null;
			LateBindingApi.Excel.Range newClass = new LateBindingApi.Excel.Range(this, returnValue);
			return newClass;
		}

		[SupportByLibrary("XL11","XL12","XL14")]
		public LateBindingApi.Excel.Range XmlDataQuery(string xPath, object selectionNamespaces, object map)
		{
			object[] paramArray = new object[3];
			paramArray[0] = xPath;
			paramArray[1] = selectionNamespaces;
			paramArray[2] = map;
			object returnValue = Invoker.MethodReturn(this, "XmlDataQuery", paramArray);
			if(null == returnValue)
				return null;
			LateBindingApi.Excel.Range newClass = new LateBindingApi.Excel.Range(this, returnValue);
			return newClass;
		}

		[SupportByLibrary("XL11","XL12","XL14")]
		public LateBindingApi.Excel.Range XmlMapQuery(string xPath)
		{
			object[] paramArray = new object[1];
			paramArray[0] = xPath;
			object returnValue = Invoker.MethodReturn(this, "XmlMapQuery", paramArray);
			if(null == returnValue)
				return null;
			LateBindingApi.Excel.Range newClass = new LateBindingApi.Excel.Range(this, returnValue);
			return newClass;
		}

		[SupportByLibrary("XL11","XL12","XL14")]
		public LateBindingApi.Excel.Range XmlMapQuery(string xPath, object selectionNamespaces, object map)
		{
			object[] paramArray = new object[3];
			paramArray[0] = xPath;
			paramArray[1] = selectionNamespaces;
			paramArray[2] = map;
			object returnValue = Invoker.MethodReturn(this, "XmlMapQuery", paramArray);
			if(null == returnValue)
				return null;
			LateBindingApi.Excel.Range newClass = new LateBindingApi.Excel.Range(this, returnValue);
			return newClass;
		}

		[SupportByLibrary("XL12","XL14")]
		public void __PrintOut()
		{
			Invoker.Method(this, "__PrintOut", null);
		}

		[SupportByLibrary("XL12","XL14")]
		public void __PrintOut(object from, object to, object copies, object preview, object activePrinter, object printToFile, object collate)
		{
			object[] paramArray = new object[7];
			paramArray[0] = from;
			paramArray[1] = to;
			paramArray[2] = copies;
			paramArray[3] = preview;
			paramArray[4] = activePrinter;
			paramArray[5] = printToFile;
			paramArray[6] = collate;
			Invoker.Method(this, "__PrintOut", paramArray);
		}

		[SupportByLibrary("XL12","XL14")]
		public void ExportAsFixedFormat(LateBindingApi.Excel.Enums.XlFixedFormatType type)
		{
			object[] paramArray = new object[1];
			paramArray[0] = type;
			Invoker.Method(this, "ExportAsFixedFormat", paramArray);
		}

		[SupportByLibrary("XL12","XL14")]
		public void ExportAsFixedFormat(LateBindingApi.Excel.Enums.XlFixedFormatType type, object filename, object quality, object includeDocProperties, object ignorePrintAreas, object from, object to, object openAfterPublish, object fixedFormatExtClassPtr)
		{
			object[] paramArray = new object[9];
			paramArray[0] = type;
			paramArray[1] = filename;
			paramArray[2] = quality;
			paramArray[3] = includeDocProperties;
			paramArray[4] = ignorePrintAreas;
			paramArray[5] = from;
			paramArray[6] = to;
			paramArray[7] = openAfterPublish;
			paramArray[8] = fixedFormatExtClassPtr;
			Invoker.Method(this, "ExportAsFixedFormat", paramArray);
		}

		#endregion

	}
}
