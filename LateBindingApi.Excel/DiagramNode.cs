//Generated by LateBindingApi.CodeGenerator
using System;
using System.Reflection;
using System.ComponentModel;
using System.Runtime.InteropServices;
using LateBindingApi.Core;
namespace LateBindingApi.Excel
{
	[SupportByLibrary("XL10","XL11","XL12","XL14")]
	public class DiagramNode : LateBindingApi.Office._IMsoDispObj
	{
		#region Construction

		public DiagramNode(COMObject parentObject, object comProxy) : base(parentObject, comProxy)
		{
		}

		public DiagramNode(COMObject parentObject, object comProxy, Type comProxyType) : base(parentObject, comProxy, comProxyType)
		{
		}

		public DiagramNode(COMObject replacedObject) : base(replacedObject)
		{
		}

		public DiagramNode()
		{
		}

		#endregion

		#region Properties

		[SupportByLibrary("XL10","XL11","XL12","XL14")]
		public COMObject Parent
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "Parent");
				COMObject returnObject = LateBindingApi.Core.Factory.CreateObjectFromComProxy(this, returnValue);
				return returnObject;
			}
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14")]
		public LateBindingApi.Excel.DiagramNodeChildren Children
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "Children");
				if(null == returnValue)
					return null;
				LateBindingApi.Excel.DiagramNodeChildren newClass = new LateBindingApi.Excel.DiagramNodeChildren(this, returnValue);
				return newClass;
			}
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14")]
		public LateBindingApi.Excel.Shape Shape
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "Shape");
				if(null == returnValue)
					return null;
				LateBindingApi.Excel.Shape newClass = new LateBindingApi.Excel.Shape(this, returnValue);
				return newClass;
			}
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14")]
		public LateBindingApi.Excel.DiagramNode Root
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "Root");
				if(null == returnValue)
					return null;
				LateBindingApi.Excel.DiagramNode newClass = new LateBindingApi.Excel.DiagramNode(this, returnValue);
				return newClass;
			}
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14")]
		public LateBindingApi.Office.IMsoDiagram Diagram
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "Diagram");
				if(null == returnValue)
					return null;
				LateBindingApi.Office.IMsoDiagram newClass = new LateBindingApi.Office.IMsoDiagram(this, returnValue);
				return newClass;
			}
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14")]
		public LateBindingApi.Office.Enums.MsoOrgChartLayoutType Layout
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "Layout");
				return (LateBindingApi.Office.Enums.MsoOrgChartLayoutType)returnValue;
			}
			set
			{
				Invoker.PropertySet(this, "Layout", value);
			}						
		}


		[SupportByLibrary("XL10","XL11","XL12","XL14")]
		public LateBindingApi.Excel.Shape TextShape
		{
			get
			{
				object returnValue = Invoker.PropertyGet(this, "TextShape");
				if(null == returnValue)
					return null;
				LateBindingApi.Excel.Shape newClass = new LateBindingApi.Excel.Shape(this, returnValue);
				return newClass;
			}
		}

		#endregion

		#region Methods

		[SupportByLibrary("XL10","XL11","XL12","XL14")]
		public LateBindingApi.Excel.DiagramNode AddNode(LateBindingApi.Office.Enums.MsoRelativeNodePosition pos, LateBindingApi.Office.Enums.MsoDiagramNodeType nodeType)
		{
			object[] paramArray = new object[2];
			paramArray[0] = pos;
			paramArray[1] = nodeType;
			object returnValue = Invoker.MethodReturn(this, "AddNode", paramArray);
			if(null == returnValue)
				return null;
			LateBindingApi.Excel.DiagramNode newClass = new LateBindingApi.Excel.DiagramNode(this, returnValue);
			return newClass;
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14")]
		public void Delete()
		{
			Invoker.Method(this, "Delete", null);
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14")]
		public void MoveNode(LateBindingApi.Excel.DiagramNode pTargetNode, LateBindingApi.Office.Enums.MsoRelativeNodePosition pos)
		{
			object[] paramArray = new object[2];
			paramArray.SetValue(pTargetNode,0);
			paramArray[1] = pos;
			Invoker.Method(this, "MoveNode", paramArray);
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14")]
		public void ReplaceNode(LateBindingApi.Excel.DiagramNode pTargetNode)
		{
			object[] paramArray = new object[1];
			paramArray.SetValue(pTargetNode,0);
			Invoker.Method(this, "ReplaceNode", paramArray);
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14")]
		public void SwapNode(LateBindingApi.Excel.DiagramNode pTargetNode, bool swapChildren)
		{
			object[] paramArray = new object[2];
			paramArray.SetValue(pTargetNode,0);
			paramArray[1] = swapChildren;
			Invoker.Method(this, "SwapNode", paramArray);
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14")]
		public LateBindingApi.Excel.DiagramNode CloneNode(bool copyChildren, LateBindingApi.Excel.DiagramNode pTargetNode, LateBindingApi.Office.Enums.MsoRelativeNodePosition pos)
		{
			object[] paramArray = new object[3];
			paramArray[0] = copyChildren;
			paramArray.SetValue(pTargetNode,1);
			paramArray[2] = pos;
			object returnValue = Invoker.MethodReturn(this, "CloneNode", paramArray);
			if(null == returnValue)
				return null;
			LateBindingApi.Excel.DiagramNode newClass = new LateBindingApi.Excel.DiagramNode(this, returnValue);
			return newClass;
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14")]
		public void TransferChildren(LateBindingApi.Excel.DiagramNode pReceivingNode)
		{
			object[] paramArray = new object[1];
			paramArray.SetValue(pReceivingNode,0);
			Invoker.Method(this, "TransferChildren", paramArray);
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14")]
		public LateBindingApi.Excel.DiagramNode NextNode()
		{
			object returnValue = Invoker.MethodReturn(this, "NextNode", null);
			if(null == returnValue)
				return null;
			LateBindingApi.Excel.DiagramNode newClass = new LateBindingApi.Excel.DiagramNode(this, returnValue);
			return newClass;
		}

		[SupportByLibrary("XL10","XL11","XL12","XL14")]
		public LateBindingApi.Excel.DiagramNode PrevNode()
		{
			object returnValue = Invoker.MethodReturn(this, "PrevNode", null);
			if(null == returnValue)
				return null;
			LateBindingApi.Excel.DiagramNode newClass = new LateBindingApi.Excel.DiagramNode(this, returnValue);
			return newClass;
		}

		#endregion

	}
}
