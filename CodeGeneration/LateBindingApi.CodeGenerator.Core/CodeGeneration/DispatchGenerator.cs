using System;
using System.Collections.Generic;
using System.Text;
using System.Xml;

namespace LateBindingApi.CodeGenerator.Core.CodeGeneration
{
    static class DispatchGenerator
    {
        #region Fields

        internal static string classHeader = "//Generated by LateBindingApi.CodeGenerator\r\nusing System;\r\nusing System.Reflection;\r\nusing LateBindingApi.Core;\r\nnamespace %namespace%\r\n{\r\n";
        internal static string classFooter = "}";

        #endregion

        #region Internal Methods


        internal static string ConvertDispatchToString(string nameSpace, string classPrefix, XmlNode faceNode)
        {
            string result = classHeader.Replace("%namespace%", nameSpace);
            string attributes = Generator.GetVersionSummary(faceNode);
            string name = faceNode.Attributes["Name2"].InnerText;
            result += attributes;
            result += "\tpublic class " + name + " : NonCreatableObject" + Environment.NewLine + "\t{" + Environment.NewLine;
            result += "\t\t#region Construction\r\n\r\n";
            result += "\t\tpublic " + name + "(IObject parentObject, object comProxy) : base(parentObject, comProxy)\r\n\t\t{\r\n\t\t}\r\n\r\n\t\t#endregion\r\n\r\n";
       
            XmlNode methodsNode = faceNode.SelectSingleNode("Methods");
            XmlNode propertiesNode = faceNode.SelectSingleNode("Properties");

            result += "\t\t#region Methods\r\n\r\n";

            for (int i = 0; i < methodsNode.ChildNodes.Count; i++)
            {            
                XmlNode itemMethod = methodsNode.ChildNodes[i];

                string method = "";
                string attributeLine = "\t" + Generator.GetVersionSummary(itemMethod);
                string methodName = itemMethod.Attributes["Name2"].InnerText;
           
                string methodParams = ParameterGenerator.GetParamsString(itemMethod);              
                string paramsArrayName = ParameterGenerator.GetParamsArrayName(itemMethod);
                string methodParamsArray = ParameterGenerator.GetParamsArray(itemMethod);

                XmlNode returnTypeNode = itemMethod.SelectSingleNode("ReturnType");
                string hasReturnType = returnTypeNode.Attributes["HasReturnType"].InnerText;
                if (true == hasReturnType.Equals("true",StringComparison.InvariantCultureIgnoreCase))
                {
                      string IsComProxy = itemMethod.Attributes["HasCOMReturnType"].InnerText;
                      string methodReturnType = itemMethod.Attributes["Type"].InnerText;
                      if (true == IsComProxy.Equals("true", StringComparison.InvariantCultureIgnoreCase))
                      {
                          method = "\t\tpublic " + methodReturnType + " " + methodName + methodParams + "\r\n\t\t{\r\n";
                          method += methodParamsArray;
                          method += Generator.MethodInvokeCallWithComReturn.Replace("%Name%", methodName).Replace("%paramArray%", paramsArrayName).Replace("%ReturnType%", methodReturnType) + "\r\n\t\t}\r\n\r\n";
                      }
                      else
                      {
                          method = "\t\tpublic " + methodReturnType + " " + methodName + methodParams + "\r\n\t\t{\r\n";
                          method += methodParamsArray;
                          method += Generator.MethodInvokeCallWithScalarReturn.Replace("%Name%", methodName).Replace("%paramArray%", paramsArrayName).Replace("%ReturnType%", methodReturnType) + "\r\n\t\t}\r\n\r\n";
                      }
                }
                else
                {
                      method = "\t\tpublic void " + methodName + methodParams + "\r\n\t\t{\r\n";
                      method += methodParamsArray;
                      method += Generator.MethodInvokeCall.Replace("%Name%", methodName).Replace("%paramArray%", paramsArrayName) + "\r\n\t\t}\r\n\r\n";
                }

              result += attributeLine + method;
              
            }
            result += "\t\t#endregion\r\n\r\n";

            result += "\t}" + Environment.NewLine;
            result += classFooter;
            return result;
        }

        internal static string ConvertDispatchToFile(string directory, string nameSpace, string classPrefix, XmlNode faceNode)
        {
            string fileName = System.IO.Path.Combine(directory, faceNode.Attributes["Name"].InnerText + ".cs");
            string newEnum = ConvertDispatchToString(nameSpace, classPrefix, faceNode);
            System.IO.File.AppendAllText(fileName, newEnum);
            string result = "\t\t<Compile Include=\"" + faceNode.Attributes["Name"].InnerText + ".cs" + "\" />";
            return result;
        }

        internal static string ConvertDispatchesToFiles(string directory, string nameSpace, string classPrefix, XmlNode faceNode)
        {          
            string result = "";
            foreach (XmlNode itemNode in faceNode)
            {
                result += ConvertDispatchToFile(directory, nameSpace, classPrefix, itemNode) + "\r\n";
            }
            return result;
        }

        #endregion

    }
}
